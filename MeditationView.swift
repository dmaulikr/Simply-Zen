//
// MeditationView.swift
// Generated by Core Animator version 1.4 on 5/19/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class MeditationPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class MeditationView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 324, height: 300))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:324, height:300)
		__scaling__.center = CGPoint(x:162.1, y:150.1)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let breath__root = MeditationPassthroughView()
		let breath__xScale = MeditationPassthroughView()
		let breath__yScale = MeditationPassthroughView()
		let breath = UIView()
		breath.bounds = CGRect(x:0, y:0, width:130.7, height:130.7)
		breath__root.layer.position = CGPoint(x:162.053, y:150.070)
		breath__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		breath__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		breath__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(breath__root)
		breath__root.addSubview(breath__xScale)
		breath__xScale.addSubview(breath__yScale)
		breath__yScale.addSubview(breath)
		__scaling__.addSubview(breath__root)
		viewsByName["Breath__root"] = breath__root
		viewsByName["Breath__xScale"] = breath__xScale
		viewsByName["Breath__yScale"] = breath__yScale
		viewsByName["Breath"] = breath

		let meditationCircle8__root = MeditationPassthroughView()
		let meditationCircle8__xScale = MeditationPassthroughView()
		let meditationCircle8__yScale = MeditationPassthroughView()
		let meditationCircle8 = UIImageView()
		let imgMeditationCircle = UIImage(named:"Meditation-Circle.png", in: bundle, compatibleWith: nil)
		if imgMeditationCircle == nil {
			print("** Warning: Could not create image from 'Meditation-Circle.png'")
		}
		meditationCircle8.image = imgMeditationCircle
		meditationCircle8.contentMode = .center
		meditationCircle8.layer.anchorPoint = CGPoint(x:0.500, y:0.996)
		meditationCircle8.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle8__root.layer.position = CGPoint(x:65.340, y:130.115)
		meditationCircle8__root.alpha = 0.66
		meditationCircle8__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle8__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle8__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle8__root)
		meditationCircle8__root.addSubview(meditationCircle8__xScale)
		meditationCircle8__xScale.addSubview(meditationCircle8__yScale)
		meditationCircle8__yScale.addSubview(meditationCircle8)
		breath.addSubview(meditationCircle8__root)
		viewsByName["Meditation-Circle-8__root"] = meditationCircle8__root
		viewsByName["Meditation-Circle-8__xScale"] = meditationCircle8__xScale
		viewsByName["Meditation-Circle-8__yScale"] = meditationCircle8__yScale
		viewsByName["Meditation-Circle-8"] = meditationCircle8

		let meditationCircle7__root = MeditationPassthroughView()
		let meditationCircle7__xScale = MeditationPassthroughView()
		let meditationCircle7__yScale = MeditationPassthroughView()
		let meditationCircle7 = UIImageView()
		meditationCircle7.image = imgMeditationCircle
		meditationCircle7.contentMode = .center
		meditationCircle7.layer.anchorPoint = CGPoint(x:0.500, y:0.000)
		meditationCircle7.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle7__root.layer.position = CGPoint(x:65.340, y:0.000)
		meditationCircle7__root.alpha = 0.66
		meditationCircle7__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle7__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle7__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle7__root)
		meditationCircle7__root.addSubview(meditationCircle7__xScale)
		meditationCircle7__xScale.addSubview(meditationCircle7__yScale)
		meditationCircle7__yScale.addSubview(meditationCircle7)
		breath.addSubview(meditationCircle7__root)
		viewsByName["Meditation-Circle-7__root"] = meditationCircle7__root
		viewsByName["Meditation-Circle-7__xScale"] = meditationCircle7__xScale
		viewsByName["Meditation-Circle-7__yScale"] = meditationCircle7__yScale
		viewsByName["Meditation-Circle-7"] = meditationCircle7

		let meditationCircle6__root = MeditationPassthroughView()
		let meditationCircle6__xScale = MeditationPassthroughView()
		let meditationCircle6__yScale = MeditationPassthroughView()
		let meditationCircle6 = UIImageView()
		meditationCircle6.image = imgMeditationCircle
		meditationCircle6.contentMode = .center
		meditationCircle6.layer.anchorPoint = CGPoint(x:1.000, y:0.500)
		meditationCircle6.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle6__root.layer.position = CGPoint(x:130.680, y:65.340)
		meditationCircle6__root.alpha = 0.66
		meditationCircle6__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle6__root)
		meditationCircle6__root.addSubview(meditationCircle6__xScale)
		meditationCircle6__xScale.addSubview(meditationCircle6__yScale)
		meditationCircle6__yScale.addSubview(meditationCircle6)
		breath.addSubview(meditationCircle6__root)
		viewsByName["Meditation-Circle 6__root"] = meditationCircle6__root
		viewsByName["Meditation-Circle 6__xScale"] = meditationCircle6__xScale
		viewsByName["Meditation-Circle 6__yScale"] = meditationCircle6__yScale
		viewsByName["Meditation-Circle 6"] = meditationCircle6

		let meditationCircle5__root = MeditationPassthroughView()
		let meditationCircle5__xScale = MeditationPassthroughView()
		let meditationCircle5__yScale = MeditationPassthroughView()
		let meditationCircle5 = UIImageView()
		meditationCircle5.image = imgMeditationCircle
		meditationCircle5.contentMode = .center
		meditationCircle5.layer.anchorPoint = CGPoint(x:0.000, y:0.500)
		meditationCircle5.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle5__root.layer.position = CGPoint(x:0.000, y:65.340)
		meditationCircle5__root.alpha = 0.66
		meditationCircle5__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle5__root)
		meditationCircle5__root.addSubview(meditationCircle5__xScale)
		meditationCircle5__xScale.addSubview(meditationCircle5__yScale)
		meditationCircle5__yScale.addSubview(meditationCircle5)
		breath.addSubview(meditationCircle5__root)
		viewsByName["Meditation-Circle 5__root"] = meditationCircle5__root
		viewsByName["Meditation-Circle 5__xScale"] = meditationCircle5__xScale
		viewsByName["Meditation-Circle 5__yScale"] = meditationCircle5__yScale
		viewsByName["Meditation-Circle 5"] = meditationCircle5

		let meditationCircle4__root = MeditationPassthroughView()
		let meditationCircle4__xScale = MeditationPassthroughView()
		let meditationCircle4__yScale = MeditationPassthroughView()
		let meditationCircle4 = UIImageView()
		meditationCircle4.image = imgMeditationCircle
		meditationCircle4.contentMode = .center
		meditationCircle4.layer.anchorPoint = CGPoint(x:0.870, y:0.170)
		meditationCircle4.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle4__root.layer.position = CGPoint(x:113.692, y:22.216)
		meditationCircle4__root.alpha = 0.66
		meditationCircle4__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle4__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle4__root)
		meditationCircle4__root.addSubview(meditationCircle4__xScale)
		meditationCircle4__xScale.addSubview(meditationCircle4__yScale)
		meditationCircle4__yScale.addSubview(meditationCircle4)
		breath.addSubview(meditationCircle4__root)
		viewsByName["Meditation-Circle 4__root"] = meditationCircle4__root
		viewsByName["Meditation-Circle 4__xScale"] = meditationCircle4__xScale
		viewsByName["Meditation-Circle 4__yScale"] = meditationCircle4__yScale
		viewsByName["Meditation-Circle 4"] = meditationCircle4

		let meditationCircle3__root = MeditationPassthroughView()
		let meditationCircle3__xScale = MeditationPassthroughView()
		let meditationCircle3__yScale = MeditationPassthroughView()
		let meditationCircle3 = UIImageView()
		meditationCircle3.image = imgMeditationCircle
		meditationCircle3.contentMode = .center
		meditationCircle3.layer.anchorPoint = CGPoint(x:0.170, y:0.870)
		meditationCircle3.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle3__root.layer.position = CGPoint(x:22.216, y:113.692)
		meditationCircle3__root.alpha = 0.66
		meditationCircle3__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle3__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle3__root)
		meditationCircle3__root.addSubview(meditationCircle3__xScale)
		meditationCircle3__xScale.addSubview(meditationCircle3__yScale)
		meditationCircle3__yScale.addSubview(meditationCircle3)
		breath.addSubview(meditationCircle3__root)
		viewsByName["Meditation-Circle 3__root"] = meditationCircle3__root
		viewsByName["Meditation-Circle 3__xScale"] = meditationCircle3__xScale
		viewsByName["Meditation-Circle 3__yScale"] = meditationCircle3__yScale
		viewsByName["Meditation-Circle 3"] = meditationCircle3

		let meditationCircle2__root = MeditationPassthroughView()
		let meditationCircle2__xScale = MeditationPassthroughView()
		let meditationCircle2__yScale = MeditationPassthroughView()
		let meditationCircle2 = UIImageView()
		meditationCircle2.image = imgMeditationCircle
		meditationCircle2.contentMode = .center
		meditationCircle2.layer.anchorPoint = CGPoint(x:0.138, y:0.154)
		meditationCircle2.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle2__root.layer.position = CGPoint(x:18.083, y:20.150)
		meditationCircle2__root.alpha = 0.66
		meditationCircle2__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle2__root)
		meditationCircle2__root.addSubview(meditationCircle2__xScale)
		meditationCircle2__xScale.addSubview(meditationCircle2__yScale)
		meditationCircle2__yScale.addSubview(meditationCircle2)
		breath.addSubview(meditationCircle2__root)
		viewsByName["Meditation-Circle 2__root"] = meditationCircle2__root
		viewsByName["Meditation-Circle 2__xScale"] = meditationCircle2__xScale
		viewsByName["Meditation-Circle 2__yScale"] = meditationCircle2__yScale
		viewsByName["Meditation-Circle 2"] = meditationCircle2

		let meditationCircle__root = MeditationPassthroughView()
		let meditationCircle__xScale = MeditationPassthroughView()
		let meditationCircle__yScale = MeditationPassthroughView()
		let meditationCircle = UIImageView()
		meditationCircle.image = imgMeditationCircle
		meditationCircle.contentMode = .center
		meditationCircle.layer.anchorPoint = CGPoint(x:0.871, y:0.840)
		meditationCircle.bounds = CGRect(x:0, y:0, width:396.0, height:396.0)
		meditationCircle__root.layer.position = CGPoint(x:113.778, y:109.711)
		meditationCircle__root.alpha = 0.66
		meditationCircle__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		meditationCircle__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		meditationCircle__root.transform = CGAffineTransform(rotationAngle: 0.000)
		breath.addSubview(meditationCircle__root)
		meditationCircle__root.addSubview(meditationCircle__xScale)
		meditationCircle__xScale.addSubview(meditationCircle__yScale)
		meditationCircle__yScale.addSubview(meditationCircle)
		breath.addSubview(meditationCircle__root)
		viewsByName["Meditation-Circle__root"] = meditationCircle__root
		viewsByName["Meditation-Circle__xScale"] = meditationCircle__xScale
		viewsByName["Meditation-Circle__yScale"] = meditationCircle__yScale
		viewsByName["Meditation-Circle"] = meditationCircle

		self.viewsByName = viewsByName
	}

	// - MARK: meditate

	func addMeditateAnimation() {
		addMeditateAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addMeditateAnimation(completion: ((Bool) -> Void)?) {
		addMeditateAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addMeditateAnimation(removedOnCompletion: Bool) {
		addMeditateAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addMeditateAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMeditateAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addMeditateAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 12.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Meditate")
			self.animationCompletions[layer.animation(forKey: "Meditate")!] = complete
		}

		let meditationCircle5RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle5RotationAnimation.duration = 12.000
		meditationCircle5RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle5RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle5RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle5RotationAnimation.repeatCount = HUGE
		meditationCircle5RotationAnimation.beginTime = beginTime
		meditationCircle5RotationAnimation.fillMode = fillMode
		meditationCircle5RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 5__root"]?.layer.add(meditationCircle5RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle5ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle5ScaleXAnimation.duration = 12.000
		meditationCircle5ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle5ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle5ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle5ScaleXAnimation.repeatCount = HUGE
		meditationCircle5ScaleXAnimation.beginTime = beginTime
		meditationCircle5ScaleXAnimation.fillMode = fillMode
		meditationCircle5ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 5__xScale"]?.layer.add(meditationCircle5ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle5ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle5ScaleYAnimation.duration = 12.000
		meditationCircle5ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle5ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle5ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle5ScaleYAnimation.repeatCount = HUGE
		meditationCircle5ScaleYAnimation.beginTime = beginTime
		meditationCircle5ScaleYAnimation.fillMode = fillMode
		meditationCircle5ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 5__yScale"]?.layer.add(meditationCircle5ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle4RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle4RotationAnimation.duration = 12.000
		meditationCircle4RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle4RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle4RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle4RotationAnimation.repeatCount = HUGE
		meditationCircle4RotationAnimation.beginTime = beginTime
		meditationCircle4RotationAnimation.fillMode = fillMode
		meditationCircle4RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 4__root"]?.layer.add(meditationCircle4RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle4ScaleXAnimation.duration = 12.000
		meditationCircle4ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle4ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle4ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle4ScaleXAnimation.repeatCount = HUGE
		meditationCircle4ScaleXAnimation.beginTime = beginTime
		meditationCircle4ScaleXAnimation.fillMode = fillMode
		meditationCircle4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 4__xScale"]?.layer.add(meditationCircle4ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle4ScaleYAnimation.duration = 12.000
		meditationCircle4ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle4ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle4ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle4ScaleYAnimation.repeatCount = HUGE
		meditationCircle4ScaleYAnimation.beginTime = beginTime
		meditationCircle4ScaleYAnimation.fillMode = fillMode
		meditationCircle4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 4__yScale"]?.layer.add(meditationCircle4ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle3RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle3RotationAnimation.duration = 12.000
		meditationCircle3RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle3RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle3RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle3RotationAnimation.repeatCount = HUGE
		meditationCircle3RotationAnimation.beginTime = beginTime
		meditationCircle3RotationAnimation.fillMode = fillMode
		meditationCircle3RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 3__root"]?.layer.add(meditationCircle3RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle3ScaleXAnimation.duration = 12.000
		meditationCircle3ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle3ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle3ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle3ScaleXAnimation.repeatCount = HUGE
		meditationCircle3ScaleXAnimation.beginTime = beginTime
		meditationCircle3ScaleXAnimation.fillMode = fillMode
		meditationCircle3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 3__xScale"]?.layer.add(meditationCircle3ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle3ScaleYAnimation.duration = 12.000
		meditationCircle3ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle3ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle3ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle3ScaleYAnimation.repeatCount = HUGE
		meditationCircle3ScaleYAnimation.beginTime = beginTime
		meditationCircle3ScaleYAnimation.fillMode = fillMode
		meditationCircle3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 3__yScale"]?.layer.add(meditationCircle3ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircleRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircleRotationAnimation.duration = 12.000
		meditationCircleRotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircleRotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircleRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircleRotationAnimation.repeatCount = HUGE
		meditationCircleRotationAnimation.beginTime = beginTime
		meditationCircleRotationAnimation.fillMode = fillMode
		meditationCircleRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle__root"]?.layer.add(meditationCircleRotationAnimation, forKey:"meditate_Rotation")

		let meditationCircleScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircleScaleXAnimation.duration = 12.000
		meditationCircleScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircleScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircleScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircleScaleXAnimation.repeatCount = HUGE
		meditationCircleScaleXAnimation.beginTime = beginTime
		meditationCircleScaleXAnimation.fillMode = fillMode
		meditationCircleScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle__xScale"]?.layer.add(meditationCircleScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircleScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircleScaleYAnimation.duration = 12.000
		meditationCircleScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircleScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircleScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircleScaleYAnimation.repeatCount = HUGE
		meditationCircleScaleYAnimation.beginTime = beginTime
		meditationCircleScaleYAnimation.fillMode = fillMode
		meditationCircleScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle__yScale"]?.layer.add(meditationCircleScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle6RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle6RotationAnimation.duration = 12.000
		meditationCircle6RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle6RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle6RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle6RotationAnimation.beginTime = beginTime
		meditationCircle6RotationAnimation.fillMode = fillMode
		meditationCircle6RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 6__root"]?.layer.add(meditationCircle6RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle6ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle6ScaleXAnimation.duration = 12.000
		meditationCircle6ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle6ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle6ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle6ScaleXAnimation.repeatCount = HUGE
		meditationCircle6ScaleXAnimation.beginTime = beginTime
		meditationCircle6ScaleXAnimation.fillMode = fillMode
		meditationCircle6ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 6__xScale"]?.layer.add(meditationCircle6ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle6ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle6ScaleYAnimation.duration = 12.000
		meditationCircle6ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle6ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle6ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle6ScaleYAnimation.repeatCount = HUGE
		meditationCircle6ScaleYAnimation.beginTime = beginTime
		meditationCircle6ScaleYAnimation.fillMode = fillMode
		meditationCircle6ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 6__yScale"]?.layer.add(meditationCircle6ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle7RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle7RotationAnimation.duration = 12.000
		meditationCircle7RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle7RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle7RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle7RotationAnimation.repeatCount = HUGE
		meditationCircle7RotationAnimation.beginTime = beginTime
		meditationCircle7RotationAnimation.fillMode = fillMode
		meditationCircle7RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-7__root"]?.layer.add(meditationCircle7RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle7OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		meditationCircle7OpacityAnimation.duration = 12.000
		meditationCircle7OpacityAnimation.values = [0.396, 0.396] as [Float]
		meditationCircle7OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		meditationCircle7OpacityAnimation.timingFunctions = [linearTiming]
		meditationCircle7OpacityAnimation.beginTime = beginTime
		meditationCircle7OpacityAnimation.fillMode = fillMode
		meditationCircle7OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-7__root"]?.layer.add(meditationCircle7OpacityAnimation, forKey:"meditate_Opacity")

		let meditationCircle7ImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		meditationCircle7ImageContentsAnimation.duration = 12.000
		meditationCircle7ImageContentsAnimation.values = [UIImage(named: "Meditation-Circle", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Meditation-Circle", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		meditationCircle7ImageContentsAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		meditationCircle7ImageContentsAnimation.timingFunctions = [linearTiming]
		meditationCircle7ImageContentsAnimation.beginTime = beginTime
		meditationCircle7ImageContentsAnimation.fillMode = fillMode
		meditationCircle7ImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-7"]?.layer.add(meditationCircle7ImageContentsAnimation, forKey:"meditate_ImageContents")

		let meditationCircle7ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle7ScaleXAnimation.duration = 12.000
		meditationCircle7ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle7ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle7ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle7ScaleXAnimation.repeatCount = HUGE
		meditationCircle7ScaleXAnimation.beginTime = beginTime
		meditationCircle7ScaleXAnimation.fillMode = fillMode
		meditationCircle7ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-7__xScale"]?.layer.add(meditationCircle7ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle7ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle7ScaleYAnimation.duration = 12.000
		meditationCircle7ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle7ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle7ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle7ScaleYAnimation.repeatCount = HUGE
		meditationCircle7ScaleYAnimation.beginTime = beginTime
		meditationCircle7ScaleYAnimation.fillMode = fillMode
		meditationCircle7ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-7__yScale"]?.layer.add(meditationCircle7ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle8RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle8RotationAnimation.duration = 12.000
		meditationCircle8RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle8RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle8RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle8RotationAnimation.repeatCount = HUGE
		meditationCircle8RotationAnimation.beginTime = beginTime
		meditationCircle8RotationAnimation.fillMode = fillMode
		meditationCircle8RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-8__root"]?.layer.add(meditationCircle8RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle8OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		meditationCircle8OpacityAnimation.duration = 12.000
		meditationCircle8OpacityAnimation.values = [0.396, 0.396] as [Float]
		meditationCircle8OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		meditationCircle8OpacityAnimation.timingFunctions = [linearTiming]
		meditationCircle8OpacityAnimation.beginTime = beginTime
		meditationCircle8OpacityAnimation.fillMode = fillMode
		meditationCircle8OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-8__root"]?.layer.add(meditationCircle8OpacityAnimation, forKey:"meditate_Opacity")

		let meditationCircle8ImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		meditationCircle8ImageContentsAnimation.duration = 12.000
		meditationCircle8ImageContentsAnimation.values = [UIImage(named: "Meditation-Circle", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "Meditation-Circle", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		meditationCircle8ImageContentsAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		meditationCircle8ImageContentsAnimation.timingFunctions = [linearTiming]
		meditationCircle8ImageContentsAnimation.beginTime = beginTime
		meditationCircle8ImageContentsAnimation.fillMode = fillMode
		meditationCircle8ImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-8"]?.layer.add(meditationCircle8ImageContentsAnimation, forKey:"meditate_ImageContents")

		let meditationCircle8ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle8ScaleXAnimation.duration = 12.000
		meditationCircle8ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle8ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle8ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle8ScaleXAnimation.repeatCount = HUGE
		meditationCircle8ScaleXAnimation.beginTime = beginTime
		meditationCircle8ScaleXAnimation.fillMode = fillMode
		meditationCircle8ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-8__xScale"]?.layer.add(meditationCircle8ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle8ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle8ScaleYAnimation.duration = 12.000
		meditationCircle8ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle8ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle8ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle8ScaleYAnimation.repeatCount = HUGE
		meditationCircle8ScaleYAnimation.beginTime = beginTime
		meditationCircle8ScaleYAnimation.fillMode = fillMode
		meditationCircle8ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle-8__yScale"]?.layer.add(meditationCircle8ScaleYAnimation, forKey:"meditate_ScaleY")

		let meditationCircle2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		meditationCircle2RotationAnimation.duration = 12.000
		meditationCircle2RotationAnimation.values = [0.000, -0.785, 0.000] as [Float]
		meditationCircle2RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle2RotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle2RotationAnimation.repeatCount = HUGE
		meditationCircle2RotationAnimation.beginTime = beginTime
		meditationCircle2RotationAnimation.fillMode = fillMode
		meditationCircle2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 2__root"]?.layer.add(meditationCircle2RotationAnimation, forKey:"meditate_Rotation")

		let meditationCircle2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		meditationCircle2ScaleXAnimation.duration = 12.000
		meditationCircle2ScaleXAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle2ScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle2ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle2ScaleXAnimation.repeatCount = HUGE
		meditationCircle2ScaleXAnimation.beginTime = beginTime
		meditationCircle2ScaleXAnimation.fillMode = fillMode
		meditationCircle2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 2__xScale"]?.layer.add(meditationCircle2ScaleXAnimation, forKey:"meditate_ScaleX")

		let meditationCircle2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		meditationCircle2ScaleYAnimation.duration = 12.000
		meditationCircle2ScaleYAnimation.values = [0.330, 0.400, 0.330] as [Float]
		meditationCircle2ScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		meditationCircle2ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		meditationCircle2ScaleYAnimation.repeatCount = HUGE
		meditationCircle2ScaleYAnimation.beginTime = beginTime
		meditationCircle2ScaleYAnimation.fillMode = fillMode
		meditationCircle2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Meditation-Circle 2__yScale"]?.layer.add(meditationCircle2ScaleYAnimation, forKey:"meditate_ScaleY")
	}

	func removeMeditateAnimation() {
		self.layer.removeAnimation(forKey: "Meditate")
		self.viewsByName["Meditation-Circle 5__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle 5__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle 5__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle 4__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle 4__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle 4__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle 3__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle 3__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle 3__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle 6__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle 6__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle 6__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle-7__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle-7__root"]?.layer.removeAnimation(forKey: "meditate_Opacity")
		self.viewsByName["Meditation-Circle-7"]?.layer.removeAnimation(forKey: "meditate_ImageContents")
		self.viewsByName["Meditation-Circle-7__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle-7__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle-8__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle-8__root"]?.layer.removeAnimation(forKey: "meditate_Opacity")
		self.viewsByName["Meditation-Circle-8"]?.layer.removeAnimation(forKey: "meditate_ImageContents")
		self.viewsByName["Meditation-Circle-8__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle-8__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
		self.viewsByName["Meditation-Circle 2__root"]?.layer.removeAnimation(forKey: "meditate_Rotation")
		self.viewsByName["Meditation-Circle 2__xScale"]?.layer.removeAnimation(forKey: "meditate_ScaleX")
		self.viewsByName["Meditation-Circle 2__yScale"]?.layer.removeAnimation(forKey: "meditate_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Meditate")
	}
}