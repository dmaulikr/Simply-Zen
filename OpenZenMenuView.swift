//
// OpenZenMenuView.swift
// Generated by Core Animator version 1.4 on 5/18/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

protocol OpenZenMenuViewDelegate: class {
	func noBellsPressed(noBells: UIButton)
	func tenMinutesPressed(tenMinutes: UIButton)
	func twentyMinutesPressed(twentyMinutes: UIButton)
	func fiveMinutesPressed(fiveMinutes: UIButton)
	func twoMinutesPressed(twoMinutes: UIButton)
}

private class OpenZenMenuPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class OpenZenMenuView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	weak var openZenMenuViewDelegate: OpenZenMenuViewDelegate?

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:768)
		__scaling__.center = CGPoint(x:207.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let tenMinutes__root = OpenZenMenuPassthroughView()
		let tenMinutes__xScale = OpenZenMenuPassthroughView()
		let tenMinutes__yScale = OpenZenMenuPassthroughView()
		let tenMinutes = UIButton(type: .custom)
		let imgTenMinutes = UIImage(named:"Ten Minutes.png", in: bundle, compatibleWith: nil)
		if imgTenMinutes == nil {
			print("** Warning: Could not create image from 'Ten Minutes.png'")
		}
		tenMinutes.setBackgroundImage(imgTenMinutes, for:.normal)
		tenMinutes.contentMode = .center
		tenMinutes.bounds = CGRect(x:0, y:0, width:492.0, height:492.0)
		tenMinutes__root.layer.position = CGPoint(x:312.942, y:529.156)
		tenMinutes__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		tenMinutes__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		tenMinutes__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tenMinutes.addTarget(self, action:#selector(OpenZenMenuView.actionTenMinutesPressed), for: .touchUpInside)
		__scaling__.addSubview(tenMinutes__root)
		tenMinutes__root.addSubview(tenMinutes__xScale)
		tenMinutes__xScale.addSubview(tenMinutes__yScale)
		tenMinutes__yScale.addSubview(tenMinutes)
		__scaling__.addSubview(tenMinutes__root)
		viewsByName["Ten Minutes__root"] = tenMinutes__root
		viewsByName["Ten Minutes__xScale"] = tenMinutes__xScale
		viewsByName["Ten Minutes__yScale"] = tenMinutes__yScale
		viewsByName["Ten Minutes"] = tenMinutes

		let twoMinutes__root = OpenZenMenuPassthroughView()
		let twoMinutes__xScale = OpenZenMenuPassthroughView()
		let twoMinutes__yScale = OpenZenMenuPassthroughView()
		let twoMinutes = UIButton(type: .custom)
		let imgTwoMinutes = UIImage(named:"Two Minutes.png", in: bundle, compatibleWith: nil)
		if imgTwoMinutes == nil {
			print("** Warning: Could not create image from 'Two Minutes.png'")
		}
		twoMinutes.setBackgroundImage(imgTwoMinutes, for:.normal)
		twoMinutes.contentMode = .center
		twoMinutes.bounds = CGRect(x:0, y:0, width:405.0, height:405.0)
		twoMinutes__root.layer.position = CGPoint(x:107.317, y:235.972)
		twoMinutes__xScale.transform = CGAffineTransform(scaleX: 0.31, y: 1.00)
		twoMinutes__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.31)
		twoMinutes__root.transform = CGAffineTransform(rotationAngle: 0.000)
		twoMinutes.addTarget(self, action:#selector(OpenZenMenuView.actionTwoMinutesPressed), for: .touchUpInside)
		__scaling__.addSubview(twoMinutes__root)
		twoMinutes__root.addSubview(twoMinutes__xScale)
		twoMinutes__xScale.addSubview(twoMinutes__yScale)
		twoMinutes__yScale.addSubview(twoMinutes)
		__scaling__.addSubview(twoMinutes__root)
		viewsByName["Two Minutes__root"] = twoMinutes__root
		viewsByName["Two Minutes__xScale"] = twoMinutes__xScale
		viewsByName["Two Minutes__yScale"] = twoMinutes__yScale
		viewsByName["Two Minutes"] = twoMinutes

		let noBells__root = OpenZenMenuPassthroughView()
		let noBells__xScale = OpenZenMenuPassthroughView()
		let noBells__yScale = OpenZenMenuPassthroughView()
		let noBells = UIButton(type: .custom)
		let imgNoBells = UIImage(named:"No Bells.png", in: bundle, compatibleWith: nil)
		if imgNoBells == nil {
			print("** Warning: Could not create image from 'No Bells.png'")
		}
		noBells.setBackgroundImage(imgNoBells, for:.normal)
		noBells.contentMode = .center
		noBells.bounds = CGRect(x:0, y:0, width:537.0, height:537.0)
		noBells__root.layer.position = CGPoint(x:201.835, y:378.835)
		noBells__xScale.transform = CGAffineTransform(scaleX: 0.35, y: 1.00)
		noBells__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.35)
		noBells__root.transform = CGAffineTransform(rotationAngle: 0.000)
		noBells.addTarget(self, action:#selector(OpenZenMenuView.actionNoBellsPressed), for: .touchUpInside)
		__scaling__.addSubview(noBells__root)
		noBells__root.addSubview(noBells__xScale)
		noBells__xScale.addSubview(noBells__yScale)
		noBells__yScale.addSubview(noBells)
		__scaling__.addSubview(noBells__root)
		viewsByName["No Bells__root"] = noBells__root
		viewsByName["No Bells__xScale"] = noBells__xScale
		viewsByName["No Bells__yScale"] = noBells__yScale
		viewsByName["No Bells"] = noBells

		let twentyMinutes__root = OpenZenMenuPassthroughView()
		let twentyMinutes__xScale = OpenZenMenuPassthroughView()
		let twentyMinutes__yScale = OpenZenMenuPassthroughView()
		let twentyMinutes = UIButton(type: .custom)
		let imgTwentyMinutes = UIImage(named:"Twenty Minutes.png", in: bundle, compatibleWith: nil)
		if imgTwentyMinutes == nil {
			print("** Warning: Could not create image from 'Twenty Minutes.png'")
		}
		twentyMinutes.setBackgroundImage(imgTwentyMinutes, for:.normal)
		twentyMinutes.contentMode = .center
		twentyMinutes.bounds = CGRect(x:0, y:0, width:450.0, height:450.0)
		twentyMinutes__root.layer.position = CGPoint(x:109.056, y:514.092)
		twentyMinutes__xScale.transform = CGAffineTransform(scaleX: 0.29, y: 1.00)
		twentyMinutes__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.29)
		twentyMinutes__root.transform = CGAffineTransform(rotationAngle: 0.000)
		twentyMinutes.addTarget(self, action:#selector(OpenZenMenuView.actionTwentyMinutesPressed), for: .touchUpInside)
		__scaling__.addSubview(twentyMinutes__root)
		twentyMinutes__root.addSubview(twentyMinutes__xScale)
		twentyMinutes__xScale.addSubview(twentyMinutes__yScale)
		twentyMinutes__yScale.addSubview(twentyMinutes)
		__scaling__.addSubview(twentyMinutes__root)
		viewsByName["Twenty Minutes__root"] = twentyMinutes__root
		viewsByName["Twenty Minutes__xScale"] = twentyMinutes__xScale
		viewsByName["Twenty Minutes__yScale"] = twentyMinutes__yScale
		viewsByName["Twenty Minutes"] = twentyMinutes

		let fiveMinutes__root = OpenZenMenuPassthroughView()
		let fiveMinutes__xScale = OpenZenMenuPassthroughView()
		let fiveMinutes__yScale = OpenZenMenuPassthroughView()
		let fiveMinutes = UIButton(type: .custom)
		let imgFiveMinutes = UIImage(named:"Five Minutes.png", in: bundle, compatibleWith: nil)
		if imgFiveMinutes == nil {
			print("** Warning: Could not create image from 'Five Minutes.png'")
		}
		fiveMinutes.setBackgroundImage(imgFiveMinutes, for:.normal)
		fiveMinutes.contentMode = .center
		fiveMinutes.bounds = CGRect(x:0, y:0, width:438.0, height:438.0)
		fiveMinutes__root.layer.position = CGPoint(x:310.614, y:230.330)
		fiveMinutes__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		fiveMinutes__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		fiveMinutes__root.transform = CGAffineTransform(rotationAngle: 0.000)
		fiveMinutes.addTarget(self, action:#selector(OpenZenMenuView.actionFiveMinutesPressed), for: .touchUpInside)
		__scaling__.addSubview(fiveMinutes__root)
		fiveMinutes__root.addSubview(fiveMinutes__xScale)
		fiveMinutes__xScale.addSubview(fiveMinutes__yScale)
		fiveMinutes__yScale.addSubview(fiveMinutes)
		__scaling__.addSubview(fiveMinutes__root)
		viewsByName["Five Minutes__root"] = fiveMinutes__root
		viewsByName["Five Minutes__xScale"] = fiveMinutes__xScale
		viewsByName["Five Minutes__yScale"] = fiveMinutes__yScale
		viewsByName["Five Minutes"] = fiveMinutes

		self.viewsByName = viewsByName
	}

	// - MARK: fiveMinutesTapped

	func addFiveMinutesTappedAnimation() {
		addFiveMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFiveMinutesTappedAnimation(completion: ((Bool) -> Void)?) {
		addFiveMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFiveMinutesTappedAnimation(removedOnCompletion: Bool) {
		addFiveMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFiveMinutesTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFiveMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFiveMinutesTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "FiveMinutesTapped")
			self.animationCompletions[layer.animation(forKey: "FiveMinutesTapped")!] = complete
		}

		let fiveMinutesOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		fiveMinutesOpacityAnimation.duration = 0.675
		fiveMinutesOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		fiveMinutesOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		fiveMinutesOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesOpacityAnimation.beginTime = beginTime
		fiveMinutesOpacityAnimation.fillMode = fillMode
		fiveMinutesOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__root"]?.layer.add(fiveMinutesOpacityAnimation, forKey:"fiveMinutesTapped_Opacity")

		let fiveMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		fiveMinutesScaleXAnimation.duration = 0.675
		fiveMinutesScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		fiveMinutesScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		fiveMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesScaleXAnimation.beginTime = beginTime
		fiveMinutesScaleXAnimation.fillMode = fillMode
		fiveMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__xScale"]?.layer.add(fiveMinutesScaleXAnimation, forKey:"fiveMinutesTapped_ScaleX")

		let fiveMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		fiveMinutesScaleYAnimation.duration = 0.675
		fiveMinutesScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		fiveMinutesScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		fiveMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesScaleYAnimation.beginTime = beginTime
		fiveMinutesScaleYAnimation.fillMode = fillMode
		fiveMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__yScale"]?.layer.add(fiveMinutesScaleYAnimation, forKey:"fiveMinutesTapped_ScaleY")
	}

	func removeFiveMinutesTappedAnimation() {
		self.layer.removeAnimation(forKey: "FiveMinutesTapped")
		self.viewsByName["Five Minutes__root"]?.layer.removeAnimation(forKey: "fiveMinutesTapped_Opacity")
		self.viewsByName["Five Minutes__xScale"]?.layer.removeAnimation(forKey: "fiveMinutesTapped_ScaleX")
		self.viewsByName["Five Minutes__yScale"]?.layer.removeAnimation(forKey: "fiveMinutesTapped_ScaleY")
	}

	// - MARK: float

	func addFloatAnimation() {
		addFloatAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addFloatAnimation(removedOnCompletion: Bool) {
		addFloatAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addFloatAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)

		let tenMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		tenMinutesScaleXAnimation.duration = 36.000
		tenMinutesScaleXAnimation.values = [0.330, 0.290, 0.370, 0.290, 0.370, 0.290, 0.330] as [Float]
		tenMinutesScaleXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		tenMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesScaleXAnimation.repeatCount = HUGE
		tenMinutesScaleXAnimation.beginTime = beginTime
		tenMinutesScaleXAnimation.fillMode = fillMode
		tenMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__xScale"]?.layer.add(tenMinutesScaleXAnimation, forKey:"float_ScaleX")

		let tenMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		tenMinutesScaleYAnimation.duration = 36.000
		tenMinutesScaleYAnimation.values = [0.330, 0.290, 0.370, 0.290, 0.370, 0.290, 0.330] as [Float]
		tenMinutesScaleYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		tenMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesScaleYAnimation.repeatCount = HUGE
		tenMinutesScaleYAnimation.beginTime = beginTime
		tenMinutesScaleYAnimation.fillMode = fillMode
		tenMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__yScale"]?.layer.add(tenMinutesScaleYAnimation, forKey:"float_ScaleY")

		let tenMinutesTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tenMinutesTranslationXAnimation.duration = 36.000
		tenMinutesTranslationXAnimation.values = [0.000, -15.664, -33.519, -60.846, -18.705, 7.820, 0.000] as [Float]
		tenMinutesTranslationXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		tenMinutesTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesTranslationXAnimation.repeatCount = HUGE
		tenMinutesTranslationXAnimation.beginTime = beginTime
		tenMinutesTranslationXAnimation.fillMode = fillMode
		tenMinutesTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__root"]?.layer.add(tenMinutesTranslationXAnimation, forKey:"float_TranslationX")

		let tenMinutesTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tenMinutesTranslationYAnimation.duration = 36.000
		tenMinutesTranslationYAnimation.values = [0.000, 16.448, 0.264, 28.319, -10.871, 33.368, 0.000] as [Float]
		tenMinutesTranslationYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		tenMinutesTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesTranslationYAnimation.repeatCount = HUGE
		tenMinutesTranslationYAnimation.beginTime = beginTime
		tenMinutesTranslationYAnimation.fillMode = fillMode
		tenMinutesTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__root"]?.layer.add(tenMinutesTranslationYAnimation, forKey:"float_TranslationY")

		let twentyMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		twentyMinutesScaleXAnimation.duration = 36.000
		twentyMinutesScaleXAnimation.values = [0.280, 0.320, 0.240, 0.320, 0.240, 0.320, 0.280] as [Float]
		twentyMinutesScaleXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twentyMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesScaleXAnimation.repeatCount = HUGE
		twentyMinutesScaleXAnimation.beginTime = beginTime
		twentyMinutesScaleXAnimation.fillMode = fillMode
		twentyMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__xScale"]?.layer.add(twentyMinutesScaleXAnimation, forKey:"float_ScaleX")

		let twentyMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		twentyMinutesScaleYAnimation.duration = 36.000
		twentyMinutesScaleYAnimation.values = [0.280, 0.320, 0.240, 0.320, 0.240, 0.320, 0.280] as [Float]
		twentyMinutesScaleYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twentyMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesScaleYAnimation.repeatCount = HUGE
		twentyMinutesScaleYAnimation.beginTime = beginTime
		twentyMinutesScaleYAnimation.fillMode = fillMode
		twentyMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__yScale"]?.layer.add(twentyMinutesScaleYAnimation, forKey:"float_ScaleY")

		let twentyMinutesTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		twentyMinutesTranslationXAnimation.duration = 36.000
		twentyMinutesTranslationXAnimation.values = [0.000, 17.749, 27.006, 1.350, 42.161, 14.958, 0.000] as [Float]
		twentyMinutesTranslationXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twentyMinutesTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesTranslationXAnimation.repeatCount = HUGE
		twentyMinutesTranslationXAnimation.beginTime = beginTime
		twentyMinutesTranslationXAnimation.fillMode = fillMode
		twentyMinutesTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__root"]?.layer.add(twentyMinutesTranslationXAnimation, forKey:"float_TranslationX")

		let twentyMinutesTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		twentyMinutesTranslationYAnimation.duration = 36.000
		twentyMinutesTranslationYAnimation.values = [0.000, -13.399, 46.198, 9.456, 33.254, -19.883, 0.000] as [Float]
		twentyMinutesTranslationYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twentyMinutesTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesTranslationYAnimation.repeatCount = HUGE
		twentyMinutesTranslationYAnimation.beginTime = beginTime
		twentyMinutesTranslationYAnimation.fillMode = fillMode
		twentyMinutesTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__root"]?.layer.add(twentyMinutesTranslationYAnimation, forKey:"float_TranslationY")

		let noBellsScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		noBellsScaleXAnimation.duration = 36.000
		noBellsScaleXAnimation.values = [0.340, 0.380, 0.300, 0.380, 0.300, 0.370, 0.340] as [Float]
		noBellsScaleXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		noBellsScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsScaleXAnimation.repeatCount = HUGE
		noBellsScaleXAnimation.beginTime = beginTime
		noBellsScaleXAnimation.fillMode = fillMode
		noBellsScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__xScale"]?.layer.add(noBellsScaleXAnimation, forKey:"float_ScaleX")

		let noBellsScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		noBellsScaleYAnimation.duration = 36.000
		noBellsScaleYAnimation.values = [0.340, 0.380, 0.300, 0.380, 0.300, 0.370, 0.340] as [Float]
		noBellsScaleYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		noBellsScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsScaleYAnimation.repeatCount = HUGE
		noBellsScaleYAnimation.beginTime = beginTime
		noBellsScaleYAnimation.fillMode = fillMode
		noBellsScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__yScale"]?.layer.add(noBellsScaleYAnimation, forKey:"float_ScaleY")

		let noBellsTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		noBellsTranslationXAnimation.duration = 36.000
		noBellsTranslationXAnimation.values = [0.000, -5.866, -19.424, 6.151, 24.002, 37.588, 0.000] as [Float]
		noBellsTranslationXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		noBellsTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsTranslationXAnimation.repeatCount = HUGE
		noBellsTranslationXAnimation.beginTime = beginTime
		noBellsTranslationXAnimation.fillMode = fillMode
		noBellsTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__root"]?.layer.add(noBellsTranslationXAnimation, forKey:"float_TranslationX")

		let noBellsTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		noBellsTranslationYAnimation.duration = 36.000
		noBellsTranslationYAnimation.values = [0.000, -13.330, 5.744, -27.648, -3.988, -36.362, 0.000] as [Float]
		noBellsTranslationYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		noBellsTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsTranslationYAnimation.repeatCount = HUGE
		noBellsTranslationYAnimation.beginTime = beginTime
		noBellsTranslationYAnimation.fillMode = fillMode
		noBellsTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__root"]?.layer.add(noBellsTranslationYAnimation, forKey:"float_TranslationY")

		let twoMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		twoMinutesScaleXAnimation.duration = 36.000
		twoMinutesScaleXAnimation.values = [0.314, 0.350, 0.270, 0.350, 0.270, 0.350, 0.310] as [Float]
		twoMinutesScaleXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twoMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesScaleXAnimation.repeatCount = HUGE
		twoMinutesScaleXAnimation.beginTime = beginTime
		twoMinutesScaleXAnimation.fillMode = fillMode
		twoMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__xScale"]?.layer.add(twoMinutesScaleXAnimation, forKey:"float_ScaleX")

		let twoMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		twoMinutesScaleYAnimation.duration = 36.000
		twoMinutesScaleYAnimation.values = [0.314, 0.350, 0.270, 0.350, 0.270, 0.350, 0.310] as [Float]
		twoMinutesScaleYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twoMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesScaleYAnimation.repeatCount = HUGE
		twoMinutesScaleYAnimation.beginTime = beginTime
		twoMinutesScaleYAnimation.fillMode = fillMode
		twoMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__yScale"]?.layer.add(twoMinutesScaleYAnimation, forKey:"float_ScaleY")

		let twoMinutesTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		twoMinutesTranslationXAnimation.duration = 36.000
		twoMinutesTranslationXAnimation.values = [0.000, 9.119, 25.294, -0.598, 25.612, 41.812, 0.000] as [Float]
		twoMinutesTranslationXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twoMinutesTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesTranslationXAnimation.repeatCount = HUGE
		twoMinutesTranslationXAnimation.beginTime = beginTime
		twoMinutesTranslationXAnimation.fillMode = fillMode
		twoMinutesTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__root"]?.layer.add(twoMinutesTranslationXAnimation, forKey:"float_TranslationX")

		let twoMinutesTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		twoMinutesTranslationYAnimation.duration = 36.000
		twoMinutesTranslationYAnimation.values = [0.000, -7.127, 9.090, -23.282, -1.435, -34.838, 0.000] as [Float]
		twoMinutesTranslationYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		twoMinutesTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesTranslationYAnimation.repeatCount = HUGE
		twoMinutesTranslationYAnimation.beginTime = beginTime
		twoMinutesTranslationYAnimation.fillMode = fillMode
		twoMinutesTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__root"]?.layer.add(twoMinutesTranslationYAnimation, forKey:"float_TranslationY")

		let fiveMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		fiveMinutesScaleXAnimation.duration = 36.000
		fiveMinutesScaleXAnimation.values = [0.330, 0.290, 0.370, 0.290, 0.370, 0.290, 0.330] as [Float]
		fiveMinutesScaleXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		fiveMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesScaleXAnimation.repeatCount = HUGE
		fiveMinutesScaleXAnimation.beginTime = beginTime
		fiveMinutesScaleXAnimation.fillMode = fillMode
		fiveMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__xScale"]?.layer.add(fiveMinutesScaleXAnimation, forKey:"float_ScaleX")

		let fiveMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		fiveMinutesScaleYAnimation.duration = 36.000
		fiveMinutesScaleYAnimation.values = [0.330, 0.290, 0.370, 0.290, 0.370, 0.290, 0.330] as [Float]
		fiveMinutesScaleYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		fiveMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesScaleYAnimation.repeatCount = HUGE
		fiveMinutesScaleYAnimation.beginTime = beginTime
		fiveMinutesScaleYAnimation.fillMode = fillMode
		fiveMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__yScale"]?.layer.add(fiveMinutesScaleYAnimation, forKey:"float_ScaleY")

		let fiveMinutesTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fiveMinutesTranslationXAnimation.duration = 36.000
		fiveMinutesTranslationXAnimation.values = [0.000, -15.814, -32.864, -10.806, 17.050, 22.148, 0.000] as [Float]
		fiveMinutesTranslationXAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		fiveMinutesTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesTranslationXAnimation.repeatCount = HUGE
		fiveMinutesTranslationXAnimation.beginTime = beginTime
		fiveMinutesTranslationXAnimation.fillMode = fillMode
		fiveMinutesTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__root"]?.layer.add(fiveMinutesTranslationXAnimation, forKey:"float_TranslationX")

		let fiveMinutesTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fiveMinutesTranslationYAnimation.duration = 36.000
		fiveMinutesTranslationYAnimation.values = [0.000, 10.838, -15.034, 10.676, -23.953, -0.061, 0.000] as [Float]
		fiveMinutesTranslationYAnimation.keyTimes = [0.000, 0.167, 0.306, 0.500, 0.667, 0.833, 1.000] as [NSNumber]
		fiveMinutesTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		fiveMinutesTranslationYAnimation.repeatCount = HUGE
		fiveMinutesTranslationYAnimation.beginTime = beginTime
		fiveMinutesTranslationYAnimation.fillMode = fillMode
		fiveMinutesTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Five Minutes__root"]?.layer.add(fiveMinutesTranslationYAnimation, forKey:"float_TranslationY")
	}

	func removeFloatAnimation() {
		self.viewsByName["Ten Minutes__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Ten Minutes__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Ten Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Ten Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Twenty Minutes__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Twenty Minutes__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Twenty Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Twenty Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["No Bells__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["No Bells__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["No Bells__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["No Bells__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Two Minutes__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Two Minutes__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Two Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Two Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Five Minutes__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Five Minutes__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Five Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Five Minutes__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
	}

	// - MARK: noBellsTapped

	func addNoBellsTappedAnimation() {
		addNoBellsTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addNoBellsTappedAnimation(completion: ((Bool) -> Void)?) {
		addNoBellsTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addNoBellsTappedAnimation(removedOnCompletion: Bool) {
		addNoBellsTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addNoBellsTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addNoBellsTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addNoBellsTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "NoBellsTapped")
			self.animationCompletions[layer.animation(forKey: "NoBellsTapped")!] = complete
		}

		let noBellsOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		noBellsOpacityAnimation.duration = 0.675
		noBellsOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		noBellsOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		noBellsOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsOpacityAnimation.beginTime = beginTime
		noBellsOpacityAnimation.fillMode = fillMode
		noBellsOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__root"]?.layer.add(noBellsOpacityAnimation, forKey:"noBellsTapped_Opacity")

		let noBellsScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		noBellsScaleXAnimation.duration = 0.675
		noBellsScaleXAnimation.values = [0.349, 0.300, 0.320, 0.280, 0.360, 0.340] as [Float]
		noBellsScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		noBellsScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsScaleXAnimation.beginTime = beginTime
		noBellsScaleXAnimation.fillMode = fillMode
		noBellsScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__xScale"]?.layer.add(noBellsScaleXAnimation, forKey:"noBellsTapped_ScaleX")

		let noBellsScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		noBellsScaleYAnimation.duration = 0.675
		noBellsScaleYAnimation.values = [0.349, 0.300, 0.320, 0.280, 0.360, 0.340] as [Float]
		noBellsScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		noBellsScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		noBellsScaleYAnimation.beginTime = beginTime
		noBellsScaleYAnimation.fillMode = fillMode
		noBellsScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["No Bells__yScale"]?.layer.add(noBellsScaleYAnimation, forKey:"noBellsTapped_ScaleY")
	}

	func removeNoBellsTappedAnimation() {
		self.layer.removeAnimation(forKey: "NoBellsTapped")
		self.viewsByName["No Bells__root"]?.layer.removeAnimation(forKey: "noBellsTapped_Opacity")
		self.viewsByName["No Bells__xScale"]?.layer.removeAnimation(forKey: "noBellsTapped_ScaleX")
		self.viewsByName["No Bells__yScale"]?.layer.removeAnimation(forKey: "noBellsTapped_ScaleY")
	}

	// - MARK: tenMinutesTapped

	func addTenMinutesTappedAnimation() {
		addTenMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addTenMinutesTappedAnimation(completion: ((Bool) -> Void)?) {
		addTenMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addTenMinutesTappedAnimation(removedOnCompletion: Bool) {
		addTenMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addTenMinutesTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTenMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addTenMinutesTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "TenMinutesTapped")
			self.animationCompletions[layer.animation(forKey: "TenMinutesTapped")!] = complete
		}

		let tenMinutesOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		tenMinutesOpacityAnimation.duration = 0.675
		tenMinutesOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		tenMinutesOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		tenMinutesOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesOpacityAnimation.beginTime = beginTime
		tenMinutesOpacityAnimation.fillMode = fillMode
		tenMinutesOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__root"]?.layer.add(tenMinutesOpacityAnimation, forKey:"tenMinutesTapped_Opacity")

		let tenMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		tenMinutesScaleXAnimation.duration = 0.675
		tenMinutesScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		tenMinutesScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		tenMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesScaleXAnimation.beginTime = beginTime
		tenMinutesScaleXAnimation.fillMode = fillMode
		tenMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__xScale"]?.layer.add(tenMinutesScaleXAnimation, forKey:"tenMinutesTapped_ScaleX")

		let tenMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		tenMinutesScaleYAnimation.duration = 0.675
		tenMinutesScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		tenMinutesScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		tenMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		tenMinutesScaleYAnimation.beginTime = beginTime
		tenMinutesScaleYAnimation.fillMode = fillMode
		tenMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Ten Minutes__yScale"]?.layer.add(tenMinutesScaleYAnimation, forKey:"tenMinutesTapped_ScaleY")
	}

	func removeTenMinutesTappedAnimation() {
		self.layer.removeAnimation(forKey: "TenMinutesTapped")
		self.viewsByName["Ten Minutes__root"]?.layer.removeAnimation(forKey: "tenMinutesTapped_Opacity")
		self.viewsByName["Ten Minutes__xScale"]?.layer.removeAnimation(forKey: "tenMinutesTapped_ScaleX")
		self.viewsByName["Ten Minutes__yScale"]?.layer.removeAnimation(forKey: "tenMinutesTapped_ScaleY")
	}

	// - MARK: twentyMinutesTapped

	func addTwentyMinutesTappedAnimation() {
		addTwentyMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addTwentyMinutesTappedAnimation(completion: ((Bool) -> Void)?) {
		addTwentyMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addTwentyMinutesTappedAnimation(removedOnCompletion: Bool) {
		addTwentyMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addTwentyMinutesTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTwentyMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addTwentyMinutesTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "TwentyMinutesTapped")
			self.animationCompletions[layer.animation(forKey: "TwentyMinutesTapped")!] = complete
		}

		let twentyMinutesOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		twentyMinutesOpacityAnimation.duration = 0.675
		twentyMinutesOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		twentyMinutesOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twentyMinutesOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesOpacityAnimation.beginTime = beginTime
		twentyMinutesOpacityAnimation.fillMode = fillMode
		twentyMinutesOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__root"]?.layer.add(twentyMinutesOpacityAnimation, forKey:"twentyMinutesTapped_Opacity")

		let twentyMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		twentyMinutesScaleXAnimation.duration = 0.675
		twentyMinutesScaleXAnimation.values = [0.288, 0.240, 0.260, 0.220, 0.300, 0.280] as [Float]
		twentyMinutesScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twentyMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesScaleXAnimation.beginTime = beginTime
		twentyMinutesScaleXAnimation.fillMode = fillMode
		twentyMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__xScale"]?.layer.add(twentyMinutesScaleXAnimation, forKey:"twentyMinutesTapped_ScaleX")

		let twentyMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		twentyMinutesScaleYAnimation.duration = 0.675
		twentyMinutesScaleYAnimation.values = [0.288, 0.240, 0.260, 0.220, 0.300, 0.280] as [Float]
		twentyMinutesScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twentyMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twentyMinutesScaleYAnimation.beginTime = beginTime
		twentyMinutesScaleYAnimation.fillMode = fillMode
		twentyMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Twenty Minutes__yScale"]?.layer.add(twentyMinutesScaleYAnimation, forKey:"twentyMinutesTapped_ScaleY")
	}

	func removeTwentyMinutesTappedAnimation() {
		self.layer.removeAnimation(forKey: "TwentyMinutesTapped")
		self.viewsByName["Twenty Minutes__root"]?.layer.removeAnimation(forKey: "twentyMinutesTapped_Opacity")
		self.viewsByName["Twenty Minutes__xScale"]?.layer.removeAnimation(forKey: "twentyMinutesTapped_ScaleX")
		self.viewsByName["Twenty Minutes__yScale"]?.layer.removeAnimation(forKey: "twentyMinutesTapped_ScaleY")
	}

	// - MARK: twoMinutesTapped

	func addTwoMinutesTappedAnimation() {
		addTwoMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addTwoMinutesTappedAnimation(completion: ((Bool) -> Void)?) {
		addTwoMinutesTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addTwoMinutesTappedAnimation(removedOnCompletion: Bool) {
		addTwoMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addTwoMinutesTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTwoMinutesTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addTwoMinutesTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "TwoMinutesTapped")
			self.animationCompletions[layer.animation(forKey: "TwoMinutesTapped")!] = complete
		}

		let twoMinutesOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		twoMinutesOpacityAnimation.duration = 0.675
		twoMinutesOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		twoMinutesOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twoMinutesOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesOpacityAnimation.beginTime = beginTime
		twoMinutesOpacityAnimation.fillMode = fillMode
		twoMinutesOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__root"]?.layer.add(twoMinutesOpacityAnimation, forKey:"twoMinutesTapped_Opacity")

		let twoMinutesScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		twoMinutesScaleXAnimation.duration = 0.675
		twoMinutesScaleXAnimation.values = [0.314, 0.270, 0.290, 0.250, 0.330, 0.310] as [Float]
		twoMinutesScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twoMinutesScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesScaleXAnimation.beginTime = beginTime
		twoMinutesScaleXAnimation.fillMode = fillMode
		twoMinutesScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__xScale"]?.layer.add(twoMinutesScaleXAnimation, forKey:"twoMinutesTapped_ScaleX")

		let twoMinutesScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		twoMinutesScaleYAnimation.duration = 0.675
		twoMinutesScaleYAnimation.values = [0.314, 0.270, 0.290, 0.250, 0.330, 0.310] as [Float]
		twoMinutesScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		twoMinutesScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		twoMinutesScaleYAnimation.beginTime = beginTime
		twoMinutesScaleYAnimation.fillMode = fillMode
		twoMinutesScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Two Minutes__yScale"]?.layer.add(twoMinutesScaleYAnimation, forKey:"twoMinutesTapped_ScaleY")
	}

	func removeTwoMinutesTappedAnimation() {
		self.layer.removeAnimation(forKey: "TwoMinutesTapped")
		self.viewsByName["Two Minutes__root"]?.layer.removeAnimation(forKey: "twoMinutesTapped_Opacity")
		self.viewsByName["Two Minutes__xScale"]?.layer.removeAnimation(forKey: "twoMinutesTapped_ScaleX")
		self.viewsByName["Two Minutes__yScale"]?.layer.removeAnimation(forKey: "twoMinutesTapped_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "NoBellsTapped")
		self.layer.removeAnimation(forKey: "TenMinutesTapped")
		self.layer.removeAnimation(forKey: "TwentyMinutesTapped")
		self.layer.removeAnimation(forKey: "TwoMinutesTapped")
		self.layer.removeAnimation(forKey: "FiveMinutesTapped")
	}

	func actionTenMinutesPressed(tenMinutes: UIButton) {
		openZenMenuViewDelegate?.tenMinutesPressed(tenMinutes: tenMinutes)
	}

	func actionTwoMinutesPressed(twoMinutes: UIButton) {
		openZenMenuViewDelegate?.twoMinutesPressed(twoMinutes: twoMinutes)
	}

	func actionNoBellsPressed(noBells: UIButton) {
		openZenMenuViewDelegate?.noBellsPressed(noBells: noBells)
	}

	func actionTwentyMinutesPressed(twentyMinutes: UIButton) {
		openZenMenuViewDelegate?.twentyMinutesPressed(twentyMinutes: twentyMinutes)
	}

	func actionFiveMinutesPressed(fiveMinutes: UIButton) {
		openZenMenuViewDelegate?.fiveMinutesPressed(fiveMinutes: fiveMinutes)
	}
}