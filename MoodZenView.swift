//
// MoodZenView.swift
// Generated by Core Animator version 1.4 on 5/19/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

protocol MoodZenViewDelegate: class {
	func sadPressed(sad: UIButton)
	func happyPressed(happy: UIButton)
	func cantSleepPressed(cantSleep: UIButton)
	func upsetPressed(upset: UIButton)
}

private class MoodZenPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class MoodZenView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	weak var moodZenViewDelegate: MoodZenViewDelegate?

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:768)
		__scaling__.center = CGPoint(x:207.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let cantSleep__root = MoodZenPassthroughView()
		let cantSleep__xScale = MoodZenPassthroughView()
		let cantSleep__yScale = MoodZenPassthroughView()
		let cantSleep = UIButton(type: .custom)
		let imgCanTSleep = UIImage(named:"Can't Sleep.png", in: bundle, compatibleWith: nil)
		if imgCanTSleep == nil {
			print("** Warning: Could not create image from 'Can't Sleep.png'")
		}
		cantSleep.setBackgroundImage(imgCanTSleep, for:.normal)
		cantSleep.contentMode = .center
		cantSleep.bounds = CGRect(x:0, y:0, width:660.0, height:660.0)
		cantSleep__root.layer.position = CGPoint(x:207.000, y:395.989)
		cantSleep__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		cantSleep__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		cantSleep__root.transform = CGAffineTransform(rotationAngle: 0.000)
		cantSleep.addTarget(self, action:#selector(MoodZenView.actionCantSleepPressed), for: .touchUpInside)
		__scaling__.addSubview(cantSleep__root)
		cantSleep__root.addSubview(cantSleep__xScale)
		cantSleep__xScale.addSubview(cantSleep__yScale)
		cantSleep__yScale.addSubview(cantSleep)
		__scaling__.addSubview(cantSleep__root)
		viewsByName["Cant Sleep__root"] = cantSleep__root
		viewsByName["Cant Sleep__xScale"] = cantSleep__xScale
		viewsByName["Cant Sleep__yScale"] = cantSleep__yScale
		viewsByName["Cant Sleep"] = cantSleep

		let happy__root = MoodZenPassthroughView()
		let happy__xScale = MoodZenPassthroughView()
		let happy__yScale = MoodZenPassthroughView()
		let happy = UIButton(type: .custom)
		let imgHappy = UIImage(named:"Happy.png", in: bundle, compatibleWith: nil)
		if imgHappy == nil {
			print("** Warning: Could not create image from 'Happy.png'")
		}
		happy.setBackgroundImage(imgHappy, for:.normal)
		happy.contentMode = .center
		happy.bounds = CGRect(x:0, y:0, width:537.0, height:537.0)
		happy__root.layer.position = CGPoint(x:295.605, y:160.302)
		happy__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		happy__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		happy__root.transform = CGAffineTransform(rotationAngle: 0.000)
		happy.addTarget(self, action:#selector(MoodZenView.actionHappyPressed), for: .touchUpInside)
		__scaling__.addSubview(happy__root)
		happy__root.addSubview(happy__xScale)
		happy__xScale.addSubview(happy__yScale)
		happy__yScale.addSubview(happy)
		__scaling__.addSubview(happy__root)
		viewsByName["Happy__root"] = happy__root
		viewsByName["Happy__xScale"] = happy__xScale
		viewsByName["Happy__yScale"] = happy__yScale
		viewsByName["Happy"] = happy

		let sad__root = MoodZenPassthroughView()
		let sad__xScale = MoodZenPassthroughView()
		let sad__yScale = MoodZenPassthroughView()
		let sad = UIButton(type: .custom)
		let imgSad = UIImage(named:"Sad.png", in: bundle, compatibleWith: nil)
		if imgSad == nil {
			print("** Warning: Could not create image from 'Sad.png'")
		}
		sad.setBackgroundImage(imgSad, for:.normal)
		sad.contentMode = .center
		sad.bounds = CGRect(x:0, y:0, width:294.0, height:294.0)
		sad__root.layer.position = CGPoint(x:113.717, y:543.287)
		sad__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		sad__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		sad__root.transform = CGAffineTransform(rotationAngle: 0.000)
		sad.addTarget(self, action:#selector(MoodZenView.actionSadPressed), for: .touchUpInside)
		__scaling__.addSubview(sad__root)
		sad__root.addSubview(sad__xScale)
		sad__xScale.addSubview(sad__yScale)
		sad__yScale.addSubview(sad)
		__scaling__.addSubview(sad__root)
		viewsByName["Sad__root"] = sad__root
		viewsByName["Sad__xScale"] = sad__xScale
		viewsByName["Sad__yScale"] = sad__yScale
		viewsByName["Sad"] = sad

		let upset__root = MoodZenPassthroughView()
		let upset__xScale = MoodZenPassthroughView()
		let upset__yScale = MoodZenPassthroughView()
		let upset = UIButton(type: .custom)
		let imgUpset = UIImage(named:"Upset.png", in: bundle, compatibleWith: nil)
		if imgUpset == nil {
			print("** Warning: Could not create image from 'Upset.png'")
		}
		upset.setBackgroundImage(imgUpset, for:.normal)
		upset.contentMode = .center
		upset.bounds = CGRect(x:0, y:0, width:417.0, height:417.0)
		upset__root.layer.position = CGPoint(x:111.985, y:233.807)
		upset__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		upset__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		upset__root.transform = CGAffineTransform(rotationAngle: 0.000)
		upset.addTarget(self, action:#selector(MoodZenView.actionUpsetPressed), for: .touchUpInside)
		__scaling__.addSubview(upset__root)
		upset__root.addSubview(upset__xScale)
		upset__xScale.addSubview(upset__yScale)
		upset__yScale.addSubview(upset)
		__scaling__.addSubview(upset__root)
		viewsByName["Upset__root"] = upset__root
		viewsByName["Upset__xScale"] = upset__xScale
		viewsByName["Upset__yScale"] = upset__yScale
		viewsByName["Upset"] = upset

		self.viewsByName = viewsByName
	}

	// - MARK: cantSleepTapped

	func addCantSleepTappedAnimation() {
		addCantSleepTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCantSleepTappedAnimation(completion: ((Bool) -> Void)?) {
		addCantSleepTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCantSleepTappedAnimation(removedOnCompletion: Bool) {
		addCantSleepTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCantSleepTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCantSleepTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCantSleepTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.850
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "CantSleepTapped")
			self.animationCompletions[layer.animation(forKey: "CantSleepTapped")!] = complete
		}

		let cantSleepOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		cantSleepOpacityAnimation.duration = 1.850
		cantSleepOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		cantSleepOpacityAnimation.keyTimes = [0.000, 0.135, 0.203, 0.257, 0.311, 1.000] as [NSNumber]
		cantSleepOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepOpacityAnimation.beginTime = beginTime
		cantSleepOpacityAnimation.fillMode = fillMode
		cantSleepOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__root"]?.layer.add(cantSleepOpacityAnimation, forKey:"cantSleepTapped_Opacity")

		let cantSleepScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		cantSleepScaleXAnimation.duration = 1.850
		cantSleepScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		cantSleepScaleXAnimation.keyTimes = [0.000, 0.135, 0.203, 0.257, 0.311, 1.000] as [NSNumber]
		cantSleepScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepScaleXAnimation.beginTime = beginTime
		cantSleepScaleXAnimation.fillMode = fillMode
		cantSleepScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__xScale"]?.layer.add(cantSleepScaleXAnimation, forKey:"cantSleepTapped_ScaleX")

		let cantSleepScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		cantSleepScaleYAnimation.duration = 1.850
		cantSleepScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		cantSleepScaleYAnimation.keyTimes = [0.000, 0.135, 0.203, 0.257, 0.311, 1.000] as [NSNumber]
		cantSleepScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepScaleYAnimation.beginTime = beginTime
		cantSleepScaleYAnimation.fillMode = fillMode
		cantSleepScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__yScale"]?.layer.add(cantSleepScaleYAnimation, forKey:"cantSleepTapped_ScaleY")
	}

	func removeCantSleepTappedAnimation() {
		self.layer.removeAnimation(forKey: "CantSleepTapped")
		self.viewsByName["Cant Sleep__root"]?.layer.removeAnimation(forKey: "cantSleepTapped_Opacity")
		self.viewsByName["Cant Sleep__xScale"]?.layer.removeAnimation(forKey: "cantSleepTapped_ScaleX")
		self.viewsByName["Cant Sleep__yScale"]?.layer.removeAnimation(forKey: "cantSleepTapped_ScaleY")
	}

	// - MARK: float

	func addFloatAnimation() {
		addFloatAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFloatAnimation(completion: ((Bool) -> Void)?) {
		addFloatAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFloatAnimation(removedOnCompletion: Bool) {
		addFloatAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFloatAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFloatAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFloatAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 18.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Float")
			self.animationCompletions[layer.animation(forKey: "Float")!] = complete
		}

		let happyScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		happyScaleXAnimation.duration = 18.000
		happyScaleXAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		happyScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		happyScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyScaleXAnimation.repeatCount = HUGE
		happyScaleXAnimation.beginTime = beginTime
		happyScaleXAnimation.fillMode = fillMode
		happyScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__xScale"]?.layer.add(happyScaleXAnimation, forKey:"float_ScaleX")

		let happyScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		happyScaleYAnimation.duration = 18.000
		happyScaleYAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		happyScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		happyScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyScaleYAnimation.repeatCount = HUGE
		happyScaleYAnimation.beginTime = beginTime
		happyScaleYAnimation.fillMode = fillMode
		happyScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__yScale"]?.layer.add(happyScaleYAnimation, forKey:"float_ScaleY")

		let happyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		happyTranslationXAnimation.duration = 18.000
		happyTranslationXAnimation.values = [0.000, -14.590, -33.055, 0.000] as [Float]
		happyTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		happyTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyTranslationXAnimation.repeatCount = HUGE
		happyTranslationXAnimation.beginTime = beginTime
		happyTranslationXAnimation.fillMode = fillMode
		happyTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__root"]?.layer.add(happyTranslationXAnimation, forKey:"float_TranslationX")

		let happyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		happyTranslationYAnimation.duration = 18.000
		happyTranslationYAnimation.values = [0.000, 17.180, 0.289, 0.000] as [Float]
		happyTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		happyTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyTranslationYAnimation.repeatCount = HUGE
		happyTranslationYAnimation.beginTime = beginTime
		happyTranslationYAnimation.fillMode = fillMode
		happyTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__root"]?.layer.add(happyTranslationYAnimation, forKey:"float_TranslationY")

		let upsetScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		upsetScaleXAnimation.duration = 18.000
		upsetScaleXAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		upsetScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		upsetScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetScaleXAnimation.repeatCount = HUGE
		upsetScaleXAnimation.beginTime = beginTime
		upsetScaleXAnimation.fillMode = fillMode
		upsetScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__xScale"]?.layer.add(upsetScaleXAnimation, forKey:"float_ScaleX")

		let upsetScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		upsetScaleYAnimation.duration = 18.000
		upsetScaleYAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		upsetScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		upsetScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetScaleYAnimation.repeatCount = HUGE
		upsetScaleYAnimation.beginTime = beginTime
		upsetScaleYAnimation.fillMode = fillMode
		upsetScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__yScale"]?.layer.add(upsetScaleYAnimation, forKey:"float_ScaleY")

		let upsetTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		upsetTranslationXAnimation.duration = 18.000
		upsetTranslationXAnimation.values = [0.000, 17.469, 27.807, 0.000] as [Float]
		upsetTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		upsetTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetTranslationXAnimation.repeatCount = HUGE
		upsetTranslationXAnimation.beginTime = beginTime
		upsetTranslationXAnimation.fillMode = fillMode
		upsetTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__root"]?.layer.add(upsetTranslationXAnimation, forKey:"float_TranslationX")

		let upsetTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		upsetTranslationYAnimation.duration = 18.000
		upsetTranslationYAnimation.values = [0.000, -7.322, 6.671, 0.000] as [Float]
		upsetTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		upsetTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetTranslationYAnimation.repeatCount = HUGE
		upsetTranslationYAnimation.beginTime = beginTime
		upsetTranslationYAnimation.fillMode = fillMode
		upsetTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__root"]?.layer.add(upsetTranslationYAnimation, forKey:"float_TranslationY")

		let cantSleepScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		cantSleepScaleXAnimation.duration = 18.000
		cantSleepScaleXAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		cantSleepScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		cantSleepScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepScaleXAnimation.repeatCount = HUGE
		cantSleepScaleXAnimation.beginTime = beginTime
		cantSleepScaleXAnimation.fillMode = fillMode
		cantSleepScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__xScale"]?.layer.add(cantSleepScaleXAnimation, forKey:"float_ScaleX")

		let cantSleepScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		cantSleepScaleYAnimation.duration = 18.000
		cantSleepScaleYAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		cantSleepScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		cantSleepScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepScaleYAnimation.repeatCount = HUGE
		cantSleepScaleYAnimation.beginTime = beginTime
		cantSleepScaleYAnimation.fillMode = fillMode
		cantSleepScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__yScale"]?.layer.add(cantSleepScaleYAnimation, forKey:"float_ScaleY")

		let cantSleepTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		cantSleepTranslationXAnimation.duration = 18.000
		cantSleepTranslationXAnimation.values = [0.000, -8.037, -20.554, 0.000] as [Float]
		cantSleepTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		cantSleepTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepTranslationXAnimation.repeatCount = HUGE
		cantSleepTranslationXAnimation.beginTime = beginTime
		cantSleepTranslationXAnimation.fillMode = fillMode
		cantSleepTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__root"]?.layer.add(cantSleepTranslationXAnimation, forKey:"float_TranslationX")

		let cantSleepTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		cantSleepTranslationYAnimation.duration = 18.000
		cantSleepTranslationYAnimation.values = [0.000, 10.497, -4.919, 0.000] as [Float]
		cantSleepTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		cantSleepTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		cantSleepTranslationYAnimation.repeatCount = HUGE
		cantSleepTranslationYAnimation.beginTime = beginTime
		cantSleepTranslationYAnimation.fillMode = fillMode
		cantSleepTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Cant Sleep__root"]?.layer.add(cantSleepTranslationYAnimation, forKey:"float_TranslationY")

		let sadScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		sadScaleXAnimation.duration = 18.000
		sadScaleXAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		sadScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		sadScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadScaleXAnimation.repeatCount = HUGE
		sadScaleXAnimation.beginTime = beginTime
		sadScaleXAnimation.fillMode = fillMode
		sadScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__xScale"]?.layer.add(sadScaleXAnimation, forKey:"float_ScaleX")

		let sadScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		sadScaleYAnimation.duration = 18.000
		sadScaleYAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		sadScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		sadScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadScaleYAnimation.repeatCount = HUGE
		sadScaleYAnimation.beginTime = beginTime
		sadScaleYAnimation.fillMode = fillMode
		sadScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__yScale"]?.layer.add(sadScaleYAnimation, forKey:"float_ScaleY")

		let sadTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		sadTranslationXAnimation.duration = 18.000
		sadTranslationXAnimation.values = [0.000, 5.635, 24.542, 0.000] as [Float]
		sadTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		sadTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadTranslationXAnimation.repeatCount = HUGE
		sadTranslationXAnimation.beginTime = beginTime
		sadTranslationXAnimation.fillMode = fillMode
		sadTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__root"]?.layer.add(sadTranslationXAnimation, forKey:"float_TranslationX")

		let sadTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		sadTranslationYAnimation.duration = 18.000
		sadTranslationYAnimation.values = [0.000, -12.521, 4.159, 0.000] as [Float]
		sadTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		sadTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadTranslationYAnimation.repeatCount = HUGE
		sadTranslationYAnimation.beginTime = beginTime
		sadTranslationYAnimation.fillMode = fillMode
		sadTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__root"]?.layer.add(sadTranslationYAnimation, forKey:"float_TranslationY")
	}

	func removeFloatAnimation() {
		self.layer.removeAnimation(forKey: "Float")
		self.viewsByName["Happy__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Happy__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Happy__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Happy__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Upset__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Upset__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Upset__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Upset__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Cant Sleep__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Cant Sleep__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Cant Sleep__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Cant Sleep__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Sad__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Sad__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Sad__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Sad__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
	}

	// - MARK: happyTapped

	func addHappyTappedAnimation() {
		addHappyTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addHappyTappedAnimation(completion: ((Bool) -> Void)?) {
		addHappyTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addHappyTappedAnimation(removedOnCompletion: Bool) {
		addHappyTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addHappyTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addHappyTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addHappyTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "HappyTapped")
			self.animationCompletions[layer.animation(forKey: "HappyTapped")!] = complete
		}

		let happyOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		happyOpacityAnimation.duration = 0.675
		happyOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		happyOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		happyOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyOpacityAnimation.beginTime = beginTime
		happyOpacityAnimation.fillMode = fillMode
		happyOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__root"]?.layer.add(happyOpacityAnimation, forKey:"happyTapped_Opacity")

		let happyScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		happyScaleXAnimation.duration = 0.675
		happyScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		happyScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		happyScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyScaleXAnimation.beginTime = beginTime
		happyScaleXAnimation.fillMode = fillMode
		happyScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__xScale"]?.layer.add(happyScaleXAnimation, forKey:"happyTapped_ScaleX")

		let happyScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		happyScaleYAnimation.duration = 0.675
		happyScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		happyScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		happyScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		happyScaleYAnimation.beginTime = beginTime
		happyScaleYAnimation.fillMode = fillMode
		happyScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Happy__yScale"]?.layer.add(happyScaleYAnimation, forKey:"happyTapped_ScaleY")
	}

	func removeHappyTappedAnimation() {
		self.layer.removeAnimation(forKey: "HappyTapped")
		self.viewsByName["Happy__root"]?.layer.removeAnimation(forKey: "happyTapped_Opacity")
		self.viewsByName["Happy__xScale"]?.layer.removeAnimation(forKey: "happyTapped_ScaleX")
		self.viewsByName["Happy__yScale"]?.layer.removeAnimation(forKey: "happyTapped_ScaleY")
	}

	// - MARK: sadTapped

	func addSadTappedAnimation() {
		addSadTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSadTappedAnimation(completion: ((Bool) -> Void)?) {
		addSadTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSadTappedAnimation(removedOnCompletion: Bool) {
		addSadTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSadTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSadTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSadTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "SadTapped")
			self.animationCompletions[layer.animation(forKey: "SadTapped")!] = complete
		}

		let sadOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		sadOpacityAnimation.duration = 0.675
		sadOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		sadOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		sadOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadOpacityAnimation.beginTime = beginTime
		sadOpacityAnimation.fillMode = fillMode
		sadOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__root"]?.layer.add(sadOpacityAnimation, forKey:"sadTapped_Opacity")

		let sadScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		sadScaleXAnimation.duration = 0.675
		sadScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		sadScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		sadScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadScaleXAnimation.beginTime = beginTime
		sadScaleXAnimation.fillMode = fillMode
		sadScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__xScale"]?.layer.add(sadScaleXAnimation, forKey:"sadTapped_ScaleX")

		let sadScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		sadScaleYAnimation.duration = 0.675
		sadScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		sadScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		sadScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		sadScaleYAnimation.beginTime = beginTime
		sadScaleYAnimation.fillMode = fillMode
		sadScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sad__yScale"]?.layer.add(sadScaleYAnimation, forKey:"sadTapped_ScaleY")
	}

	func removeSadTappedAnimation() {
		self.layer.removeAnimation(forKey: "SadTapped")
		self.viewsByName["Sad__root"]?.layer.removeAnimation(forKey: "sadTapped_Opacity")
		self.viewsByName["Sad__xScale"]?.layer.removeAnimation(forKey: "sadTapped_ScaleX")
		self.viewsByName["Sad__yScale"]?.layer.removeAnimation(forKey: "sadTapped_ScaleY")
	}

	// - MARK: upsetTapped

	func addUpsetTappedAnimation() {
		addUpsetTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUpsetTappedAnimation(completion: ((Bool) -> Void)?) {
		addUpsetTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUpsetTappedAnimation(removedOnCompletion: Bool) {
		addUpsetTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUpsetTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUpsetTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUpsetTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "UpsetTapped")
			self.animationCompletions[layer.animation(forKey: "UpsetTapped")!] = complete
		}

		let upsetOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		upsetOpacityAnimation.duration = 0.675
		upsetOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		upsetOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		upsetOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetOpacityAnimation.beginTime = beginTime
		upsetOpacityAnimation.fillMode = fillMode
		upsetOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__root"]?.layer.add(upsetOpacityAnimation, forKey:"upsetTapped_Opacity")

		let upsetScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		upsetScaleXAnimation.duration = 0.675
		upsetScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		upsetScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		upsetScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetScaleXAnimation.beginTime = beginTime
		upsetScaleXAnimation.fillMode = fillMode
		upsetScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__xScale"]?.layer.add(upsetScaleXAnimation, forKey:"upsetTapped_ScaleX")

		let upsetScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		upsetScaleYAnimation.duration = 0.675
		upsetScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		upsetScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		upsetScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		upsetScaleYAnimation.beginTime = beginTime
		upsetScaleYAnimation.fillMode = fillMode
		upsetScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Upset__yScale"]?.layer.add(upsetScaleYAnimation, forKey:"upsetTapped_ScaleY")
	}

	func removeUpsetTappedAnimation() {
		self.layer.removeAnimation(forKey: "UpsetTapped")
		self.viewsByName["Upset__root"]?.layer.removeAnimation(forKey: "upsetTapped_Opacity")
		self.viewsByName["Upset__xScale"]?.layer.removeAnimation(forKey: "upsetTapped_ScaleX")
		self.viewsByName["Upset__yScale"]?.layer.removeAnimation(forKey: "upsetTapped_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "CantSleepTapped")
		self.layer.removeAnimation(forKey: "SadTapped")
		self.layer.removeAnimation(forKey: "Float")
		self.layer.removeAnimation(forKey: "HappyTapped")
		self.layer.removeAnimation(forKey: "UpsetTapped")
	}

	@objc func actionCantSleepPressed(cantSleep: UIButton) {
		moodZenViewDelegate?.cantSleepPressed(cantSleep: cantSleep)
	}

	@objc func actionHappyPressed(happy: UIButton) {
		moodZenViewDelegate?.happyPressed(happy: happy)
	}

	@objc func actionSadPressed(sad: UIButton) {
		moodZenViewDelegate?.sadPressed(sad: sad)
	}

	@objc func actionUpsetPressed(upset: UIButton) {
		moodZenViewDelegate?.upsetPressed(upset: upset)
	}
}
