//
// GuidedZenMenuView.swift
// Generated by Core Animator version 1.4 on 5/19/17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

protocol GuidedZenMenuViewDelegate: class {
	func relaxPressed(relax: UIButton)
	func heartMeditationPressed(heartMeditation: UIButton)
	func beginningZenPressed(beginningZen: UIButton)
	func lettingGoPressed(lettingGo: UIButton)
	func advancedBreathingPressed(advancedBreathing: UIButton)
}

private class GuidedZenMenuPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class GuidedZenMenuView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	weak var guidedZenMenuViewDelegate: GuidedZenMenuViewDelegate?

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:768)
		__scaling__.center = CGPoint(x:207.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let lettingGo__root = GuidedZenMenuPassthroughView()
		let lettingGo__xScale = GuidedZenMenuPassthroughView()
		let lettingGo__yScale = GuidedZenMenuPassthroughView()
		let lettingGo = UIButton(type: .custom)
		let imgLettingGo = UIImage(named:"Letting Go.png", in: bundle, compatibleWith: nil)
		if imgLettingGo == nil {
			print("** Warning: Could not create image from 'Letting Go.png'")
		}
		lettingGo.setBackgroundImage(imgLettingGo, for:.normal)
		lettingGo.contentMode = .center
		lettingGo.bounds = CGRect(x:0, y:0, width:486.0, height:489.0)
		lettingGo__root.layer.position = CGPoint(x:287.190, y:599.519)
		lettingGo__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		lettingGo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		lettingGo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		lettingGo.addTarget(self, action:#selector(GuidedZenMenuView.actionLettingGoPressed), for: .touchUpInside)
		__scaling__.addSubview(lettingGo__root)
		lettingGo__root.addSubview(lettingGo__xScale)
		lettingGo__xScale.addSubview(lettingGo__yScale)
		lettingGo__yScale.addSubview(lettingGo)
		__scaling__.addSubview(lettingGo__root)
		viewsByName["Letting Go__root"] = lettingGo__root
		viewsByName["Letting Go__xScale"] = lettingGo__xScale
		viewsByName["Letting Go__yScale"] = lettingGo__yScale
		viewsByName["Letting Go"] = lettingGo

		let beginningZen__root = GuidedZenMenuPassthroughView()
		let beginningZen__xScale = GuidedZenMenuPassthroughView()
		let beginningZen__yScale = GuidedZenMenuPassthroughView()
		let beginningZen = UIButton(type: .custom)
		let imgBeginningZen = UIImage(named:"Beginning Zen.png", in: bundle, compatibleWith: nil)
		if imgBeginningZen == nil {
			print("** Warning: Could not create image from 'Beginning Zen.png'")
		}
		beginningZen.setBackgroundImage(imgBeginningZen, for:.normal)
		beginningZen.contentMode = .center
		beginningZen.bounds = CGRect(x:0, y:0, width:582.0, height:582.0)
		beginningZen__root.layer.position = CGPoint(x:207.000, y:384.000)
		beginningZen__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		beginningZen__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		beginningZen__root.transform = CGAffineTransform(rotationAngle: 0.000)
		beginningZen.addTarget(self, action:#selector(GuidedZenMenuView.actionBeginningZenPressed), for: .touchUpInside)
		__scaling__.addSubview(beginningZen__root)
		beginningZen__root.addSubview(beginningZen__xScale)
		beginningZen__xScale.addSubview(beginningZen__yScale)
		beginningZen__yScale.addSubview(beginningZen)
		__scaling__.addSubview(beginningZen__root)
		viewsByName["Beginning Zen__root"] = beginningZen__root
		viewsByName["Beginning Zen__xScale"] = beginningZen__xScale
		viewsByName["Beginning Zen__yScale"] = beginningZen__yScale
		viewsByName["Beginning Zen"] = beginningZen

		let relax__root = GuidedZenMenuPassthroughView()
		let relax__xScale = GuidedZenMenuPassthroughView()
		let relax__yScale = GuidedZenMenuPassthroughView()
		let relax = UIButton(type: .custom)
		let imgRelax = UIImage(named:"Relax.png", in: bundle, compatibleWith: nil)
		if imgRelax == nil {
			print("** Warning: Could not create image from 'Relax.png'")
		}
		relax.setBackgroundImage(imgRelax, for:.normal)
		relax.contentMode = .center
		relax.bounds = CGRect(x:0, y:0, width:423.0, height:423.0)
		relax__root.layer.position = CGPoint(x:110.115, y:530.646)
		relax__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		relax__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		relax__root.transform = CGAffineTransform(rotationAngle: 0.000)
		relax.addTarget(self, action:#selector(GuidedZenMenuView.actionRelaxPressed), for: .touchUpInside)
		__scaling__.addSubview(relax__root)
		relax__root.addSubview(relax__xScale)
		relax__xScale.addSubview(relax__yScale)
		relax__yScale.addSubview(relax)
		__scaling__.addSubview(relax__root)
		viewsByName["Relax__root"] = relax__root
		viewsByName["Relax__xScale"] = relax__xScale
		viewsByName["Relax__yScale"] = relax__yScale
		viewsByName["Relax"] = relax

		let heartMeditation__root = GuidedZenMenuPassthroughView()
		let heartMeditation__xScale = GuidedZenMenuPassthroughView()
		let heartMeditation__yScale = GuidedZenMenuPassthroughView()
		let heartMeditation = UIButton(type: .custom)
		let imgHeartMeditation = UIImage(named:"Heart Meditation.png", in: bundle, compatibleWith: nil)
		if imgHeartMeditation == nil {
			print("** Warning: Could not create image from 'Heart Meditation.png'")
		}
		heartMeditation.setBackgroundImage(imgHeartMeditation, for:.normal)
		heartMeditation.contentMode = .center
		heartMeditation.bounds = CGRect(x:0, y:0, width:573.0, height:573.0)
		heartMeditation__root.layer.position = CGPoint(x:112.455, y:177.592)
		heartMeditation__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		heartMeditation__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		heartMeditation__root.transform = CGAffineTransform(rotationAngle: 0.000)
		heartMeditation.addTarget(self, action:#selector(GuidedZenMenuView.actionHeartMeditationPressed), for: .touchUpInside)
		__scaling__.addSubview(heartMeditation__root)
		heartMeditation__root.addSubview(heartMeditation__xScale)
		heartMeditation__xScale.addSubview(heartMeditation__yScale)
		heartMeditation__yScale.addSubview(heartMeditation)
		__scaling__.addSubview(heartMeditation__root)
		viewsByName["Heart Meditation__root"] = heartMeditation__root
		viewsByName["Heart Meditation__xScale"] = heartMeditation__xScale
		viewsByName["Heart Meditation__yScale"] = heartMeditation__yScale
		viewsByName["Heart Meditation"] = heartMeditation

		let advancedBreathing__root = GuidedZenMenuPassthroughView()
		let advancedBreathing__xScale = GuidedZenMenuPassthroughView()
		let advancedBreathing__yScale = GuidedZenMenuPassthroughView()
		let advancedBreathing = UIButton(type: .custom)
		let imgAdvancedBreathing = UIImage(named:"Advanced Breathing.png", in: bundle, compatibleWith: nil)
		if imgAdvancedBreathing == nil {
			print("** Warning: Could not create image from 'Advanced Breathing.png'")
		}
		advancedBreathing.setBackgroundImage(imgAdvancedBreathing, for:.normal)
		advancedBreathing.contentMode = .center
		advancedBreathing.bounds = CGRect(x:0, y:0, width:537.0, height:537.0)
		advancedBreathing__root.layer.position = CGPoint(x:313.789, y:224.359)
		advancedBreathing__xScale.transform = CGAffineTransform(scaleX: 0.33, y: 1.00)
		advancedBreathing__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.33)
		advancedBreathing__root.transform = CGAffineTransform(rotationAngle: 0.000)
		advancedBreathing.addTarget(self, action:#selector(GuidedZenMenuView.actionAdvancedBreathingPressed), for: .touchUpInside)
		__scaling__.addSubview(advancedBreathing__root)
		advancedBreathing__root.addSubview(advancedBreathing__xScale)
		advancedBreathing__xScale.addSubview(advancedBreathing__yScale)
		advancedBreathing__yScale.addSubview(advancedBreathing)
		__scaling__.addSubview(advancedBreathing__root)
		viewsByName["Advanced Breathing__root"] = advancedBreathing__root
		viewsByName["Advanced Breathing__xScale"] = advancedBreathing__xScale
		viewsByName["Advanced Breathing__yScale"] = advancedBreathing__yScale
		viewsByName["Advanced Breathing"] = advancedBreathing

		self.viewsByName = viewsByName
	}

	// - MARK: advancedBreathingTapped

	func addAdvancedBreathingTappedAnimation() {
		addAdvancedBreathingTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addAdvancedBreathingTappedAnimation(completion: ((Bool) -> Void)?) {
		addAdvancedBreathingTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addAdvancedBreathingTappedAnimation(removedOnCompletion: Bool) {
		addAdvancedBreathingTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addAdvancedBreathingTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addAdvancedBreathingTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addAdvancedBreathingTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "AdvancedBreathingTapped")
			self.animationCompletions[layer.animation(forKey: "AdvancedBreathingTapped")!] = complete
		}

		let advancedBreathingOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		advancedBreathingOpacityAnimation.duration = 0.675
		advancedBreathingOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		advancedBreathingOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		advancedBreathingOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingOpacityAnimation.beginTime = beginTime
		advancedBreathingOpacityAnimation.fillMode = fillMode
		advancedBreathingOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__root"]?.layer.add(advancedBreathingOpacityAnimation, forKey:"advancedBreathingTapped_Opacity")

		let advancedBreathingScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		advancedBreathingScaleXAnimation.duration = 0.675
		advancedBreathingScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		advancedBreathingScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		advancedBreathingScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingScaleXAnimation.beginTime = beginTime
		advancedBreathingScaleXAnimation.fillMode = fillMode
		advancedBreathingScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__xScale"]?.layer.add(advancedBreathingScaleXAnimation, forKey:"advancedBreathingTapped_ScaleX")

		let advancedBreathingScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		advancedBreathingScaleYAnimation.duration = 0.675
		advancedBreathingScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		advancedBreathingScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		advancedBreathingScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingScaleYAnimation.beginTime = beginTime
		advancedBreathingScaleYAnimation.fillMode = fillMode
		advancedBreathingScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__yScale"]?.layer.add(advancedBreathingScaleYAnimation, forKey:"advancedBreathingTapped_ScaleY")
	}

	func removeAdvancedBreathingTappedAnimation() {
		self.layer.removeAnimation(forKey: "AdvancedBreathingTapped")
		self.viewsByName["Advanced Breathing__root"]?.layer.removeAnimation(forKey: "advancedBreathingTapped_Opacity")
		self.viewsByName["Advanced Breathing__xScale"]?.layer.removeAnimation(forKey: "advancedBreathingTapped_ScaleX")
		self.viewsByName["Advanced Breathing__yScale"]?.layer.removeAnimation(forKey: "advancedBreathingTapped_ScaleY")
	}

	// - MARK: beginningZenTapped

	func addBeginningZenTappedAnimation() {
		addBeginningZenTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addBeginningZenTappedAnimation(completion: ((Bool) -> Void)?) {
		addBeginningZenTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addBeginningZenTappedAnimation(removedOnCompletion: Bool) {
		addBeginningZenTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addBeginningZenTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addBeginningZenTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addBeginningZenTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "BeginningZenTapped")
			self.animationCompletions[layer.animation(forKey: "BeginningZenTapped")!] = complete
		}

		let beginningZenOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		beginningZenOpacityAnimation.duration = 0.675
		beginningZenOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		beginningZenOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		beginningZenOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenOpacityAnimation.beginTime = beginTime
		beginningZenOpacityAnimation.fillMode = fillMode
		beginningZenOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__root"]?.layer.add(beginningZenOpacityAnimation, forKey:"beginningZenTapped_Opacity")

		let beginningZenScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		beginningZenScaleXAnimation.duration = 0.675
		beginningZenScaleXAnimation.values = [0.400, 0.360, 0.380, 0.340, 0.420, 0.400] as [Float]
		beginningZenScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		beginningZenScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenScaleXAnimation.beginTime = beginTime
		beginningZenScaleXAnimation.fillMode = fillMode
		beginningZenScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__xScale"]?.layer.add(beginningZenScaleXAnimation, forKey:"beginningZenTapped_ScaleX")

		let beginningZenScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		beginningZenScaleYAnimation.duration = 0.675
		beginningZenScaleYAnimation.values = [0.400, 0.360, 0.380, 0.340, 0.420, 0.400] as [Float]
		beginningZenScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		beginningZenScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenScaleYAnimation.beginTime = beginTime
		beginningZenScaleYAnimation.fillMode = fillMode
		beginningZenScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__yScale"]?.layer.add(beginningZenScaleYAnimation, forKey:"beginningZenTapped_ScaleY")
	}

	func removeBeginningZenTappedAnimation() {
		self.layer.removeAnimation(forKey: "BeginningZenTapped")
		self.viewsByName["Beginning Zen__root"]?.layer.removeAnimation(forKey: "beginningZenTapped_Opacity")
		self.viewsByName["Beginning Zen__xScale"]?.layer.removeAnimation(forKey: "beginningZenTapped_ScaleX")
		self.viewsByName["Beginning Zen__yScale"]?.layer.removeAnimation(forKey: "beginningZenTapped_ScaleY")
	}

	// - MARK: float

	func addFloatAnimation() {
		addFloatAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addFloatAnimation(completion: ((Bool) -> Void)?) {
		addFloatAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addFloatAnimation(removedOnCompletion: Bool) {
		addFloatAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addFloatAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addFloatAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addFloatAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 18.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Float")
			self.animationCompletions[layer.animation(forKey: "Float")!] = complete
		}

		let lettingGoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lettingGoScaleXAnimation.duration = 18.000
		lettingGoScaleXAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		lettingGoScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		lettingGoScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoScaleXAnimation.repeatCount = HUGE
		lettingGoScaleXAnimation.beginTime = beginTime
		lettingGoScaleXAnimation.fillMode = fillMode
		lettingGoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__xScale"]?.layer.add(lettingGoScaleXAnimation, forKey:"float_ScaleX")

		let lettingGoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lettingGoScaleYAnimation.duration = 18.000
		lettingGoScaleYAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		lettingGoScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		lettingGoScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoScaleYAnimation.repeatCount = HUGE
		lettingGoScaleYAnimation.beginTime = beginTime
		lettingGoScaleYAnimation.fillMode = fillMode
		lettingGoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__yScale"]?.layer.add(lettingGoScaleYAnimation, forKey:"float_ScaleY")

		let lettingGoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lettingGoTranslationXAnimation.duration = 18.000
		lettingGoTranslationXAnimation.values = [0.000, -18.558, -9.448, 0.000] as [Float]
		lettingGoTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		lettingGoTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoTranslationXAnimation.repeatCount = HUGE
		lettingGoTranslationXAnimation.beginTime = beginTime
		lettingGoTranslationXAnimation.fillMode = fillMode
		lettingGoTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__root"]?.layer.add(lettingGoTranslationXAnimation, forKey:"float_TranslationX")

		let lettingGoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lettingGoTranslationYAnimation.duration = 18.000
		lettingGoTranslationYAnimation.values = [0.000, 24.701, -24.412, 0.000] as [Float]
		lettingGoTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		lettingGoTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoTranslationYAnimation.repeatCount = HUGE
		lettingGoTranslationYAnimation.beginTime = beginTime
		lettingGoTranslationYAnimation.fillMode = fillMode
		lettingGoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__root"]?.layer.add(lettingGoTranslationYAnimation, forKey:"float_TranslationY")

		let beginningZenScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		beginningZenScaleXAnimation.duration = 18.000
		beginningZenScaleXAnimation.values = [0.400, 0.360, 0.440, 0.400] as [Float]
		beginningZenScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		beginningZenScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenScaleXAnimation.repeatCount = HUGE
		beginningZenScaleXAnimation.beginTime = beginTime
		beginningZenScaleXAnimation.fillMode = fillMode
		beginningZenScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__xScale"]?.layer.add(beginningZenScaleXAnimation, forKey:"float_ScaleX")

		let beginningZenScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		beginningZenScaleYAnimation.duration = 18.000
		beginningZenScaleYAnimation.values = [0.400, 0.360, 0.440, 0.400] as [Float]
		beginningZenScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		beginningZenScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenScaleYAnimation.repeatCount = HUGE
		beginningZenScaleYAnimation.beginTime = beginTime
		beginningZenScaleYAnimation.fillMode = fillMode
		beginningZenScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__yScale"]?.layer.add(beginningZenScaleYAnimation, forKey:"float_ScaleY")

		let beginningZenTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		beginningZenTranslationXAnimation.duration = 18.000
		beginningZenTranslationXAnimation.values = [0.000, 14.497, 17.436, 0.000] as [Float]
		beginningZenTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		beginningZenTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenTranslationXAnimation.repeatCount = HUGE
		beginningZenTranslationXAnimation.beginTime = beginTime
		beginningZenTranslationXAnimation.fillMode = fillMode
		beginningZenTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__root"]?.layer.add(beginningZenTranslationXAnimation, forKey:"float_TranslationX")

		let beginningZenTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		beginningZenTranslationYAnimation.duration = 18.000
		beginningZenTranslationYAnimation.values = [0.000, 16.538, -24.461, 0.000] as [Float]
		beginningZenTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		beginningZenTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		beginningZenTranslationYAnimation.repeatCount = HUGE
		beginningZenTranslationYAnimation.beginTime = beginTime
		beginningZenTranslationYAnimation.fillMode = fillMode
		beginningZenTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Beginning Zen__root"]?.layer.add(beginningZenTranslationYAnimation, forKey:"float_TranslationY")

		let relaxScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		relaxScaleXAnimation.duration = 18.000
		relaxScaleXAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		relaxScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		relaxScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxScaleXAnimation.repeatCount = HUGE
		relaxScaleXAnimation.beginTime = beginTime
		relaxScaleXAnimation.fillMode = fillMode
		relaxScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__xScale"]?.layer.add(relaxScaleXAnimation, forKey:"float_ScaleX")

		let relaxScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		relaxScaleYAnimation.duration = 18.000
		relaxScaleYAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		relaxScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		relaxScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxScaleYAnimation.repeatCount = HUGE
		relaxScaleYAnimation.beginTime = beginTime
		relaxScaleYAnimation.fillMode = fillMode
		relaxScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__yScale"]?.layer.add(relaxScaleYAnimation, forKey:"float_ScaleY")

		let relaxTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		relaxTranslationXAnimation.duration = 18.000
		relaxTranslationXAnimation.values = [0.000, -14.818, 12.794, 0.000] as [Float]
		relaxTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		relaxTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxTranslationXAnimation.repeatCount = HUGE
		relaxTranslationXAnimation.beginTime = beginTime
		relaxTranslationXAnimation.fillMode = fillMode
		relaxTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__root"]?.layer.add(relaxTranslationXAnimation, forKey:"float_TranslationX")

		let relaxTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		relaxTranslationYAnimation.duration = 18.000
		relaxTranslationYAnimation.values = [0.000, -27.335, 25.465, 0.000] as [Float]
		relaxTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		relaxTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxTranslationYAnimation.repeatCount = HUGE
		relaxTranslationYAnimation.beginTime = beginTime
		relaxTranslationYAnimation.fillMode = fillMode
		relaxTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__root"]?.layer.add(relaxTranslationYAnimation, forKey:"float_TranslationY")

		let advancedBreathingScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		advancedBreathingScaleXAnimation.duration = 18.000
		advancedBreathingScaleXAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		advancedBreathingScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		advancedBreathingScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingScaleXAnimation.repeatCount = HUGE
		advancedBreathingScaleXAnimation.beginTime = beginTime
		advancedBreathingScaleXAnimation.fillMode = fillMode
		advancedBreathingScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__xScale"]?.layer.add(advancedBreathingScaleXAnimation, forKey:"float_ScaleX")

		let advancedBreathingScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		advancedBreathingScaleYAnimation.duration = 18.000
		advancedBreathingScaleYAnimation.values = [0.330, 0.370, 0.290, 0.330] as [Float]
		advancedBreathingScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		advancedBreathingScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingScaleYAnimation.repeatCount = HUGE
		advancedBreathingScaleYAnimation.beginTime = beginTime
		advancedBreathingScaleYAnimation.fillMode = fillMode
		advancedBreathingScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__yScale"]?.layer.add(advancedBreathingScaleYAnimation, forKey:"float_ScaleY")

		let advancedBreathingTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		advancedBreathingTranslationXAnimation.duration = 18.000
		advancedBreathingTranslationXAnimation.values = [0.000, -9.265, -20.042, 0.000] as [Float]
		advancedBreathingTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		advancedBreathingTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingTranslationXAnimation.repeatCount = HUGE
		advancedBreathingTranslationXAnimation.beginTime = beginTime
		advancedBreathingTranslationXAnimation.fillMode = fillMode
		advancedBreathingTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__root"]?.layer.add(advancedBreathingTranslationXAnimation, forKey:"float_TranslationX")

		let advancedBreathingTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		advancedBreathingTranslationYAnimation.duration = 18.000
		advancedBreathingTranslationYAnimation.values = [0.000, -14.314, 27.169, 0.000] as [Float]
		advancedBreathingTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		advancedBreathingTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		advancedBreathingTranslationYAnimation.repeatCount = HUGE
		advancedBreathingTranslationYAnimation.beginTime = beginTime
		advancedBreathingTranslationYAnimation.fillMode = fillMode
		advancedBreathingTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Advanced Breathing__root"]?.layer.add(advancedBreathingTranslationYAnimation, forKey:"float_TranslationY")

		let heartMeditationScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		heartMeditationScaleXAnimation.duration = 18.000
		heartMeditationScaleXAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		heartMeditationScaleXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		heartMeditationScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationScaleXAnimation.repeatCount = HUGE
		heartMeditationScaleXAnimation.beginTime = beginTime
		heartMeditationScaleXAnimation.fillMode = fillMode
		heartMeditationScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__xScale"]?.layer.add(heartMeditationScaleXAnimation, forKey:"float_ScaleX")

		let heartMeditationScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		heartMeditationScaleYAnimation.duration = 18.000
		heartMeditationScaleYAnimation.values = [0.330, 0.290, 0.370, 0.330] as [Float]
		heartMeditationScaleYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		heartMeditationScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationScaleYAnimation.repeatCount = HUGE
		heartMeditationScaleYAnimation.beginTime = beginTime
		heartMeditationScaleYAnimation.fillMode = fillMode
		heartMeditationScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__yScale"]?.layer.add(heartMeditationScaleYAnimation, forKey:"float_ScaleY")

		let heartMeditationTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		heartMeditationTranslationXAnimation.duration = 18.000
		heartMeditationTranslationXAnimation.values = [0.000, 22.347, 24.038, 0.000] as [Float]
		heartMeditationTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		heartMeditationTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationTranslationXAnimation.repeatCount = HUGE
		heartMeditationTranslationXAnimation.beginTime = beginTime
		heartMeditationTranslationXAnimation.fillMode = fillMode
		heartMeditationTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__root"]?.layer.add(heartMeditationTranslationXAnimation, forKey:"float_TranslationX")

		let heartMeditationTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		heartMeditationTranslationYAnimation.duration = 18.000
		heartMeditationTranslationYAnimation.values = [0.000, 19.509, -23.201, 0.000] as [Float]
		heartMeditationTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		heartMeditationTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationTranslationYAnimation.repeatCount = HUGE
		heartMeditationTranslationYAnimation.beginTime = beginTime
		heartMeditationTranslationYAnimation.fillMode = fillMode
		heartMeditationTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__root"]?.layer.add(heartMeditationTranslationYAnimation, forKey:"float_TranslationY")
	}

	func removeFloatAnimation() {
		self.layer.removeAnimation(forKey: "Float")
		self.viewsByName["Letting Go__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Letting Go__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Letting Go__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Letting Go__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Beginning Zen__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Beginning Zen__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Beginning Zen__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Beginning Zen__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Relax__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Relax__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Relax__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Relax__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Advanced Breathing__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Advanced Breathing__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Advanced Breathing__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Advanced Breathing__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
		self.viewsByName["Heart Meditation__xScale"]?.layer.removeAnimation(forKey: "float_ScaleX")
		self.viewsByName["Heart Meditation__yScale"]?.layer.removeAnimation(forKey: "float_ScaleY")
		self.viewsByName["Heart Meditation__root"]?.layer.removeAnimation(forKey: "float_TranslationX")
		self.viewsByName["Heart Meditation__root"]?.layer.removeAnimation(forKey: "float_TranslationY")
	}

	// - MARK: heartMeditationTapped

	func addHeartMeditationTappedAnimation() {
		addHeartMeditationTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addHeartMeditationTappedAnimation(completion: ((Bool) -> Void)?) {
		addHeartMeditationTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addHeartMeditationTappedAnimation(removedOnCompletion: Bool) {
		addHeartMeditationTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addHeartMeditationTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addHeartMeditationTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addHeartMeditationTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "HeartMeditationTapped")
			self.animationCompletions[layer.animation(forKey: "HeartMeditationTapped")!] = complete
		}

		let heartMeditationOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		heartMeditationOpacityAnimation.duration = 0.675
		heartMeditationOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		heartMeditationOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		heartMeditationOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationOpacityAnimation.beginTime = beginTime
		heartMeditationOpacityAnimation.fillMode = fillMode
		heartMeditationOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__root"]?.layer.add(heartMeditationOpacityAnimation, forKey:"heartMeditationTapped_Opacity")

		let heartMeditationScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		heartMeditationScaleXAnimation.duration = 0.675
		heartMeditationScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		heartMeditationScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		heartMeditationScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationScaleXAnimation.beginTime = beginTime
		heartMeditationScaleXAnimation.fillMode = fillMode
		heartMeditationScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__xScale"]?.layer.add(heartMeditationScaleXAnimation, forKey:"heartMeditationTapped_ScaleX")

		let heartMeditationScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		heartMeditationScaleYAnimation.duration = 0.675
		heartMeditationScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		heartMeditationScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		heartMeditationScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		heartMeditationScaleYAnimation.beginTime = beginTime
		heartMeditationScaleYAnimation.fillMode = fillMode
		heartMeditationScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Heart Meditation__yScale"]?.layer.add(heartMeditationScaleYAnimation, forKey:"heartMeditationTapped_ScaleY")
	}

	func removeHeartMeditationTappedAnimation() {
		self.layer.removeAnimation(forKey: "HeartMeditationTapped")
		self.viewsByName["Heart Meditation__root"]?.layer.removeAnimation(forKey: "heartMeditationTapped_Opacity")
		self.viewsByName["Heart Meditation__xScale"]?.layer.removeAnimation(forKey: "heartMeditationTapped_ScaleX")
		self.viewsByName["Heart Meditation__yScale"]?.layer.removeAnimation(forKey: "heartMeditationTapped_ScaleY")
	}

	// - MARK: lettingGoTapped

	func addLettingGoTappedAnimation() {
		addLettingGoTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addLettingGoTappedAnimation(completion: ((Bool) -> Void)?) {
		addLettingGoTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addLettingGoTappedAnimation(removedOnCompletion: Bool) {
		addLettingGoTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addLettingGoTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addLettingGoTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addLettingGoTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "LettingGoTapped")
			self.animationCompletions[layer.animation(forKey: "LettingGoTapped")!] = complete
		}

		let lettingGoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		lettingGoOpacityAnimation.duration = 0.675
		lettingGoOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		lettingGoOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		lettingGoOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoOpacityAnimation.beginTime = beginTime
		lettingGoOpacityAnimation.fillMode = fillMode
		lettingGoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__root"]?.layer.add(lettingGoOpacityAnimation, forKey:"lettingGoTapped_Opacity")

		let lettingGoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lettingGoScaleXAnimation.duration = 0.675
		lettingGoScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		lettingGoScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		lettingGoScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoScaleXAnimation.beginTime = beginTime
		lettingGoScaleXAnimation.fillMode = fillMode
		lettingGoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__xScale"]?.layer.add(lettingGoScaleXAnimation, forKey:"lettingGoTapped_ScaleX")

		let lettingGoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lettingGoScaleYAnimation.duration = 0.675
		lettingGoScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		lettingGoScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		lettingGoScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		lettingGoScaleYAnimation.beginTime = beginTime
		lettingGoScaleYAnimation.fillMode = fillMode
		lettingGoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Letting Go__yScale"]?.layer.add(lettingGoScaleYAnimation, forKey:"lettingGoTapped_ScaleY")
	}

	func removeLettingGoTappedAnimation() {
		self.layer.removeAnimation(forKey: "LettingGoTapped")
		self.viewsByName["Letting Go__root"]?.layer.removeAnimation(forKey: "lettingGoTapped_Opacity")
		self.viewsByName["Letting Go__xScale"]?.layer.removeAnimation(forKey: "lettingGoTapped_ScaleX")
		self.viewsByName["Letting Go__yScale"]?.layer.removeAnimation(forKey: "lettingGoTapped_ScaleY")
	}

	// - MARK: relaxTapped

	func addRelaxTappedAnimation() {
		addRelaxTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addRelaxTappedAnimation(completion: ((Bool) -> Void)?) {
		addRelaxTappedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addRelaxTappedAnimation(removedOnCompletion: Bool) {
		addRelaxTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addRelaxTappedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addRelaxTappedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addRelaxTappedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.675
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "RelaxTapped")
			self.animationCompletions[layer.animation(forKey: "RelaxTapped")!] = complete
		}

		let relaxOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		relaxOpacityAnimation.duration = 0.675
		relaxOpacityAnimation.values = [1.000, 0.730, 0.800, 0.900, 0.950, 1.000] as [Float]
		relaxOpacityAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		relaxOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxOpacityAnimation.beginTime = beginTime
		relaxOpacityAnimation.fillMode = fillMode
		relaxOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__root"]?.layer.add(relaxOpacityAnimation, forKey:"relaxTapped_Opacity")

		let relaxScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		relaxScaleXAnimation.duration = 0.675
		relaxScaleXAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		relaxScaleXAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		relaxScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxScaleXAnimation.beginTime = beginTime
		relaxScaleXAnimation.fillMode = fillMode
		relaxScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__xScale"]?.layer.add(relaxScaleXAnimation, forKey:"relaxTapped_ScaleX")

		let relaxScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		relaxScaleYAnimation.duration = 0.675
		relaxScaleYAnimation.values = [0.330, 0.290, 0.310, 0.270, 0.350, 0.330] as [Float]
		relaxScaleYAnimation.keyTimes = [0.000, 0.370, 0.556, 0.704, 0.852, 1.000] as [NSNumber]
		relaxScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming]
		relaxScaleYAnimation.beginTime = beginTime
		relaxScaleYAnimation.fillMode = fillMode
		relaxScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Relax__yScale"]?.layer.add(relaxScaleYAnimation, forKey:"relaxTapped_ScaleY")
	}

	func removeRelaxTappedAnimation() {
		self.layer.removeAnimation(forKey: "RelaxTapped")
		self.viewsByName["Relax__root"]?.layer.removeAnimation(forKey: "relaxTapped_Opacity")
		self.viewsByName["Relax__xScale"]?.layer.removeAnimation(forKey: "relaxTapped_ScaleX")
		self.viewsByName["Relax__yScale"]?.layer.removeAnimation(forKey: "relaxTapped_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "RelaxTapped")
		self.layer.removeAnimation(forKey: "HeartMeditationTapped")
		self.layer.removeAnimation(forKey: "BeginningZenTapped")
		self.layer.removeAnimation(forKey: "Float")
		self.layer.removeAnimation(forKey: "AdvancedBreathingTapped")
		self.layer.removeAnimation(forKey: "LettingGoTapped")
	}

	func actionLettingGoPressed(lettingGo: UIButton) {
		guidedZenMenuViewDelegate?.lettingGoPressed(lettingGo: lettingGo)
	}

	func actionBeginningZenPressed(beginningZen: UIButton) {
		guidedZenMenuViewDelegate?.beginningZenPressed(beginningZen: beginningZen)
	}

	func actionRelaxPressed(relax: UIButton) {
		guidedZenMenuViewDelegate?.relaxPressed(relax: relax)
	}

	func actionHeartMeditationPressed(heartMeditation: UIButton) {
		guidedZenMenuViewDelegate?.heartMeditationPressed(heartMeditation: heartMeditation)
	}

	func actionAdvancedBreathingPressed(advancedBreathing: UIButton) {
		guidedZenMenuViewDelegate?.advancedBreathingPressed(advancedBreathing: advancedBreathing)
	}
}